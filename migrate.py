#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ CtrlBot."""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from alembic.config import Config
from alembic import command
from database import db
from config import config


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db.connect()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")


async def close_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    await db.close()
    print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


def run_alembic_command(cmd, *args):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã Alembic."""
    alembic_cfg = Config("alembic.ini")
    # –û–±–Ω–æ–≤–ª—è–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    alembic_cfg.set_main_option(
        "sqlalchemy.url",
        f"postgresql://{config.DB_USER}:{config.DB_PASSWORD}@{config.DB_HOST}:{config.DB_PORT}/{config.DB_NAME}"
    )
    
    if cmd == "upgrade":
        command.upgrade(alembic_cfg, *args)
    elif cmd == "downgrade":
        command.downgrade(alembic_cfg, *args)
    elif cmd == "revision":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è revision
        if "--autogenerate" in args:
            command.revision(alembic_cfg, "--autogenerate", *[arg for arg in args if arg != "--autogenerate"])
        else:
            command.revision(alembic_cfg, *args)
    elif cmd == "current":
        command.current(alembic_cfg, *args)
    elif cmd == "history":
        command.history(alembic_cfg, *args)
    elif cmd == "heads":
        command.heads(alembic_cfg, *args)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) < 2:
        print("""
üöÄ CtrlBot Migration Manager

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python migrate.py <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]

–ö–æ–º–∞–Ω–¥—ã:
    init                    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    upgrade [revision]      - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: head)
    downgrade [revision]    - –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: -1)
    revision [message]      - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    current                 - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é
    history                 - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
    heads                   - –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ–ª–æ–≤–Ω—ã–µ —Ä–µ–≤–∏–∑–∏–∏

–ü—Ä–∏–º–µ—Ä—ã:
    python migrate.py init
    python migrate.py upgrade
    python migrate.py revision "Add user table"
    python migrate.py downgrade -1
        """)
        return

    command_name = sys.argv[1]
    args = sys.argv[2:]

    try:
        if command_name == "init":
            await init_database()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            await init_database()
            
            if command_name == "upgrade":
                revision = args[0] if args else "head"
                print(f"‚¨ÜÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —Ä–µ–≤–∏–∑–∏–∏: {revision}")
                run_alembic_command("upgrade", revision)
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                
            elif command_name == "downgrade":
                revision = args[0] if args else "-1"
                print(f"‚¨áÔ∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —Ä–µ–≤–∏–∑–∏–∏: {revision}")
                run_alembic_command("downgrade", revision)
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–∞—á–µ–Ω—ã")
                
            elif command_name == "revision":
                message = args[0] if args else "Auto migration"
                print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: {message}")
                run_alembic_command("revision", "--autogenerate", "-m", message)
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                
            elif command_name == "current":
                print("üìä –¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è:")
                run_alembic_command("current")
                
            elif command_name == "history":
                print("üìö –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:")
                run_alembic_command("history")
                
            elif command_name == "heads":
                print("üéØ –ì–æ–ª–æ–≤–Ω—ã–µ —Ä–µ–≤–∏–∑–∏–∏:")
                run_alembic_command("heads")
                
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command_name}")
                return

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        await close_database()


if __name__ == "__main__":
    asyncio.run(main())
