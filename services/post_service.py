# Service: posts

from typing import List, Optional, Dict, Any
from datetime import datetime, timezone
from utils.timezone_utils import to_utc
import logging

from database import db
from config import config

logger = logging.getLogger(__name__)

class PostService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏"""
    
    async def get_channel_id_by_tg_id(self, tg_channel_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –ø–æ Telegram channel ID"""
        try:
            query = "SELECT id FROM channels WHERE tg_channel_id = $1"
            return await db.fetch_val(query, tg_channel_id)
        except Exception as e:
            logger.error("Failed to get channel ID for tg_channel_id %s: %s", tg_channel_id, e)
            return None
    
    async def create_post(self, tg_channel_id: int, title: Optional[str], 
                         body_md: str, user_id: int, series_id: Optional[int] = None,
                         scheduled_at: Optional[datetime] = None, tag_ids: Optional[List[int]] = None,
                         entities: Optional[List] = None, media_data: Optional[dict] = None) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
        logger.info("=== –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê –í –ë–î ===")
        logger.info(f"üì¢ TG Channel ID: {tg_channel_id}")
        logger.info(f"üìù Title: {title}")
        logger.info(f"üìÑ Body length: {len(body_md)} chars")
        logger.info(f"üë§ User ID: {user_id}")
        logger.info(f"üìö Series ID: {series_id}")
        logger.info(f"‚è∞ Scheduled at: {scheduled_at}")
        logger.info(f"üè∑Ô∏è Tag IDs: {tag_ids}")
        logger.info(f"üé® Entities: {len(entities) if entities else 0}")
        logger.info(f"üì∑ –ú–µ–¥–∏–∞: {media_data['type'] if media_data else '–ù–µ—Ç'}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã
            logger.info("üîç –ò—â–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            channel_id = await self.get_channel_id_by_tg_id(tg_channel_id)
            if not channel_id:
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª —Å tg_channel_id {tg_channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ValueError(f"Channel with tg_channel_id {tg_channel_id} not found")
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω channel_id: {channel_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = 'scheduled' if scheduled_at else 'draft'
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞: {status}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            if scheduled_at:
                scheduled_at_utc = to_utc(scheduled_at)
                logger.info(f"üïê –í—Ä–µ–º—è –≤ UTC: {scheduled_at_utc}")
            else:
                scheduled_at_utc = None
                logger.info("üïê –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º entities –≤ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            entities_json = None
            if entities:
                from utils.entities import entities_to_json
                entities_json = entities_to_json(entities)
                logger.info(f"üé® Entities —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON: {len(entities_json)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                logger.info("üé® Entities –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ
            media_type = None
            media_file_id = None
            media_data_json = None
            if media_data:
                media_type = media_data.get('type')
                media_file_id = media_data.get('file_id')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –∫–∞–∫ JSON
                import json
                media_data_json = json.dumps(media_data, ensure_ascii=False)
                logger.info(f"üì∑ –ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {media_type} - {media_file_id}")
            else:
                logger.info("üì∑ –ú–µ–¥–∏–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            
            logger.info("üíæ –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –≤ —Ç–∞–±–ª–∏—Ü—É posts")
            query = """
                INSERT INTO posts (channel_id, user_id, title, body_md, entities, media_type, media_file_id, media_data, status, series_id, scheduled_at, created_at, updated_at)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW(), NOW())
                RETURNING id
            """
            post_id = await db.fetch_val(query, channel_id, user_id, title, body_md, entities_json, media_type, media_file_id, media_data_json, status, series_id, scheduled_at_utc)
            logger.info(f"‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {post_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if tag_ids:
                logger.info(f"üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º {len(tag_ids)} —Ç–µ–≥–æ–≤ –∫ –ø–æ—Å—Ç—É")
                from services.tags import tag_service
                for tag_id in tag_ids:
                    logger.info(f"üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ ID: {tag_id}")
                    await tag_service.add_tag_to_post(post_id, tag_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ç–µ–≥–æ–≤
                logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ç–µ–≥–æ–≤")
                await tag_service.update_post_tags_cache(post_id)
            else:
                logger.info("üè∑Ô∏è –¢–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä–∏—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
            if series_id:
                logger.info(f"üìö –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏: {series_id}")
                from services.series import series_service
                await series_service.increment_series_number(series_id)
            else:
                logger.info("üìö –°–µ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
            
            logger.info("‚úÖ –ü–û–°–¢ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù")
            logger.info("Post created: %s for channel %s by user %s (series: %s, tags: %s)", 
                       post_id, channel_id, user_id, series_id, tag_ids)
            return post_id
        except Exception as e:
            logger.error("‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê")
            logger.error("Failed to create post: %s", e)
            logger.error("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏:")
            logger.error("  - tg_channel_id: %s", tg_channel_id)
            logger.error("  - title: %s", title)
            logger.error("  - body_md length: %s", len(body_md) if body_md else 0)
            logger.error("  - user_id: %s", user_id)
            logger.error("  - series_id: %s", series_id)
            logger.error("  - scheduled_at: %s", scheduled_at)
            logger.error("  - tag_ids: %s", tag_ids)
            raise
    
    async def get_post(self, post_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç –ø–æ ID"""
        try:
            query = """
                SELECT p.*, c.title as channel_title, s.title as series_title
                FROM posts p
                LEFT JOIN channels c ON p.channel_id = c.id
                LEFT JOIN series s ON p.series_id = s.id
                WHERE p.id = $1
            """
            result = await db.fetch_one(query, post_id)
            if not result:
                return None
            
            post_dict = dict(result)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º entities –∏–∑ JSON
            if post_dict.get('entities'):
                from utils.entities import entities_from_json
                post_dict['entities'] = entities_from_json(post_dict['entities'])
                logger.info(f"üé® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(post_dict['entities'])} entities –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            if post_dict.get('media_data'):
                import json
                try:
                    post_dict['media_data'] = json.loads(post_dict['media_data'])
                    logger.info(f"üì∑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {post_dict.get('media_type')}")
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
                    post_dict['media_data'] = None
            
            return post_dict
        except Exception as e:
            logger.error("Failed to get post %s: %s", post_id, e)
            raise
    
    async def get_user_posts(self, user_id: int, limit: int = 20, offset: int = 0) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = """
                SELECT p.*, c.title as channel_title, s.title as series_title, s.next_number
                FROM posts p
                LEFT JOIN channels c ON p.channel_id = c.id
                LEFT JOIN series s ON p.series_id = s.id
                WHERE p.user_id = $1
                ORDER BY p.created_at DESC
                LIMIT $2 OFFSET $3
            """
            results = await db.fetch_all(query, user_id, limit, offset)
            return [dict(row) for row in results]
        except Exception as e:
            logger.error("Failed to get posts for user %s: %s", user_id, e)
            raise
    
    async def update_post(self, post_id: int, title: Optional[str] = None,
                         body_md: Optional[str] = None, status: Optional[str] = None,
                         scheduled_at: Optional[datetime] = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç"""
        try:
            updates = []
            params = []
            param_count = 1
            
            if title is not None:
                updates.append(f"title = ${param_count}")
                params.append(title)
                param_count += 1
            
            if body_md is not None:
                updates.append(f"body_md = ${param_count}")
                params.append(body_md)
                param_count += 1
            
            if status is not None:
                updates.append(f"status = ${param_count}")
                params.append(status)
                param_count += 1
            
            if scheduled_at is not None:
                updates.append(f"scheduled_at = ${param_count}")
                params.append(scheduled_at)
                param_count += 1
            
            updates.append(f"updated_at = ${param_count}")
            params.append(datetime.now(timezone.utc))
            param_count += 1
            
            params.append(post_id)
            
            query = f"""
                UPDATE posts 
                SET {', '.join(updates)}
                WHERE id = ${param_count}
            """
            
            result = await db.execute(query, *params)
            logger.info("Post %s updated", post_id)
            return True
        except Exception as e:
            logger.error("Failed to update post %s: %s", post_id, e)
            raise
    
    async def get_posts_by_channel(self, channel_id: int, status: Optional[str] = None,
                                  limit: int = 50, offset: int = 0) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞"""
        try:
            where_clause = "WHERE p.channel_id = $1"
            params = [channel_id]
            param_count = 1
            
            if status:
                param_count += 1
                where_clause += f" AND p.status = ${param_count}"
                params.append(status)
            
            query = f"""
                SELECT p.*, c.title as channel_title, s.title as series_title
                FROM posts p
                LEFT JOIN channels c ON p.channel_id = c.id
                LEFT JOIN series s ON p.series_id = s.id
                {where_clause}
                ORDER BY p.created_at DESC
                LIMIT ${param_count + 1} OFFSET ${param_count + 2}
            """
            params.extend([limit, offset])
            
            results = await db.fetch_all(query, *params)
            return [dict(row) for row in results]
        except Exception as e:
            logger.error("Failed to get posts for channel %s: %s", channel_id, e)
            raise
    
    async def get_scheduled_posts(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–æ—á–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å idx_posts_scheduled_status_time
            query = """
                SELECT p.*, c.tg_channel_id, c.title as channel_title
                FROM posts p
                JOIN channels c ON p.channel_id = c.id
                WHERE p.status = 'scheduled' 
                AND p.scheduled_at <= NOW()
                AND p.scheduled_at > NOW() - INTERVAL '1 hour'  -- –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                ORDER BY p.scheduled_at ASC
                LIMIT 100  -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑
            """
            results = await db.fetch_all(query)
            posts = [dict(row) for row in results]
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º entities –∏ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
            for post in posts:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º entities –∏–∑ JSON
                if post.get('entities'):
                    from utils.entities import entities_from_json
                    post['entities'] = entities_from_json(post['entities'])
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
                if post.get('media_data'):
                    import json
                    try:
                        post['media_data'] = json.loads(post['media_data'])
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–∞ {post['id']}: {e}")
                        post['media_data'] = None
            
            return posts
        except Exception as e:
            logger.error("Failed to get scheduled posts: %s", e)
            raise
    
    async def publish_post(self, post_id: int, message_id: int) -> bool:
        """–ü–æ–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        try:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ {post_id} –Ω–∞ 'published' —Å message_id {message_id}")
            
            query = """
                UPDATE posts 
                SET status = 'published', 
                    published_at = NOW(),
                    message_id = $2,
                    updated_at = NOW()
                WHERE id = $1
            """
            
            result = await db.execute(query, post_id, message_id)
            logger.info(f"‚úÖ SQL UPDATE –≤—ã–ø–æ–ª–Ω–µ–Ω: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
            updated_post = await db.fetch_one("""
                SELECT id, status, published_at, message_id 
                FROM posts 
                WHERE id = $1
            """, post_id)
            
            if updated_post:
                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ID={updated_post['id']}, status={updated_post['status']}, published_at={updated_post['published_at']}, message_id={updated_post['message_id']}")
            else:
                logger.error(f"‚ùå –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
            
            logger.info("Post %s published with message_id %s", post_id, message_id)
            return True
        except Exception as e:
            logger.error("Failed to publish post %s: %s", post_id, e)
            raise
    
    async def publish_scheduled_posts(self, bot) -> int:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.info("=== –ù–ê–ß–ê–õ–û –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –û–¢–õ–û–ñ–ï–ù–ù–´–• –ü–û–°–¢–û–í ===")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            scheduled_posts = await self.get_scheduled_posts()
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(scheduled_posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            
            if not scheduled_posts:
                logger.info("üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return 0
            
            published_count = 0
            failed_posts = []
            
            for post in scheduled_posts:
                try:
                    logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç ID {post['id']}: '{post['body_md'][:50]}...'")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostPublisher –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    from services.publisher import get_publisher
                    publisher = get_publisher()
                    
                    post_data = {
                        'id': post['id'],
                        'body_md': post['body_md'],
                        'entities': post.get('entities'),  # –ï—Å–ª–∏ –µ—Å—Ç—å entities
                        'media_data': post.get('media_data')  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
                    }
                    
                    results = await publisher.publish_post(
                        post_data, 
                        [post['tg_channel_id']], 
                        update_db=True
                    )
                    
                    if results['success_count'] > 0:
                        published_count += 1
                        logger.info(f"‚úÖ –ü–æ—Å—Ç {post['id']} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {post['tg_channel_id']}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç {post['id']}")
                        failed_posts.append(post['id'])
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post['id']}: {e}")
                    failed_posts.append(post['id'])
                    continue
            
            # –ü–æ–º–µ—á–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ—Å—Ç—ã (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            await self._mark_failed_posts()
            
            logger.info(f"‚úÖ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {published_count}/{len(scheduled_posts)} –ø–æ—Å—Ç–æ–≤")
            if failed_posts:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã: {failed_posts}")
            
            return published_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            raise
    
    async def _mark_failed_posts(self):
        """–ü–æ–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç—ã –∫–∞–∫ failed, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"""
        try:
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            # –≠—Ç–æ –Ω–µ –æ—á–∏—Å—Ç–∫–∞, –∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
            query = """
                UPDATE posts 
                SET status = 'failed', updated_at = NOW()
                WHERE status = 'scheduled' 
                AND scheduled_at < NOW() - INTERVAL '24 hours'
                AND id NOT IN (
                    SELECT id FROM posts 
                    WHERE status = 'published' 
                    AND published_at IS NOT NULL
                )
            """
            result = await db.execute(query)
            if result > 0:
                logger.info(f"‚ö†Ô∏è –ü–æ–º–µ—á–µ–Ω–æ {result} –ø–æ—Å—Ç–æ–≤ –∫–∞–∫ failed (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def delete_post(self, post_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        try:
            query = """
                UPDATE posts 
                SET status = 'deleted', updated_at = NOW()
                WHERE id = $1
            """
            await db.execute(query, post_id)
            logger.info("Post %s deleted", post_id)
            return True
        except Exception as e:
            logger.error("Failed to delete post %s: %s", post_id, e)
            raise
    
    async def validate_post_text(self, text: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"""
        if not text or not text.strip():
            return False, "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if len(text) > config.MAX_POST_LENGTH:
            return False, f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {config.MAX_POST_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        return True, ""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
post_service = PostService()
