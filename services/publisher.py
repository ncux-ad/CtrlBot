# Service: Post Publisher
# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª—ã

from typing import List, Optional, Dict, Any
from aiogram import Bot
from aiogram.types import Message, MessageEntity, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

from utils.logging import get_logger
from database import db

logger = get_logger(__name__)

class PostPublisher:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.max_retries = 3
        self.retry_delay = 1.0
    
    async def publish_text(
        self, 
        chat_id: int, 
        text: str, 
        entities: Optional[List[MessageEntity]] = None,
        parse_mode: Optional[ParseMode] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[Message]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            chat_id: ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            entities: Telegram entities –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (–µ—Å–ª–∏ entities –Ω–µ —É–∫–∞–∑–∞–Ω—ã)
            reply_markup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            Message –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–Ω–∞–ª {chat_id}")
            logger.info(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üé® Entities: {len(entities) if entities else 0}")
            logger.info(f"üîß Parse mode: {parse_mode}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏
            if entities:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º entities –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º entities –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                message = await self._send_with_entities(
                    chat_id, text, entities, reply_markup
                )
            elif parse_mode:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π parse_mode
                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode: {parse_mode}")
                message = await self._send_with_parse_mode(
                    chat_id, text, parse_mode, reply_markup
                )
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                logger.info("üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                message = await self._send_with_auto_formatting(
                    chat_id, text, reply_markup
                )
            
            if message:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID {message.message_id}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {chat_id}: {e}")
            return None
    
    async def publish_media(
        self,
        chat_id: int,
        media_type: str,
        media_file_id: str,
        caption: Optional[str] = None,
        caption_entities: Optional[List[MessageEntity]] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[Message]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
        
        Args:
            chat_id: ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
            media_type: –¢–∏–ø –º–µ–¥–∏–∞ (photo, video, document, etc.)
            media_file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
            caption_entities: Entities –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            reply_markup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            Message –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º {media_type} –≤ –∫–∞–Ω–∞–ª {chat_id}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
            if media_type == "photo":
                message = await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=media_file_id,
                    caption=caption,
                    caption_entities=caption_entities,
                    reply_markup=reply_markup
                )
            elif media_type == "video":
                message = await self.bot.send_video(
                    chat_id=chat_id,
                    video=media_file_id,
                    caption=caption,
                    caption_entities=caption_entities,
                    reply_markup=reply_markup
                )
            elif media_type == "document":
                message = await self.bot.send_document(
                    chat_id=chat_id,
                    document=media_file_id,
                    caption=caption,
                    caption_entities=caption_entities,
                    reply_markup=reply_markup
                )
            else:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
                return None
            
            logger.info(f"‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID {message.message_id}")
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª {chat_id}: {e}")
            return None
    
    async def publish_copy(
        self,
        chat_id: int,
        from_chat_id: int,
        message_id: int,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[Message]:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        
        Args:
            chat_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
            from_chat_id: ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
            message_id: ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            Message –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üìã –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞ {from_chat_id} –≤ {chat_id}")
            
            message = await self.bot.copy_message(
                chat_id=chat_id,
                from_chat_id=from_chat_id,
                message_id=message_id,
                reply_markup=reply_markup
            )
            
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ID {message.message_id}")
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def publish_poll(
        self,
        chat_id: int,
        question: str,
        options: List[str],
        is_anonymous: bool = True,
        type: str = "regular",
        allows_multiple_answers: bool = False,
        correct_option_id: Optional[int] = None,
        explanation: Optional[str] = None,
        explanation_entities: Optional[List[MessageEntity]] = None,
        open_period: Optional[int] = None,
        close_date: Optional[int] = None,
        is_closed: bool = False,
        disable_notification: bool = False,
        protect_content: bool = False,
        reply_to_message_id: Optional[int] = None,
        allow_sending_without_reply: bool = False,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[Message]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª
        
        Args:
            chat_id: ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
            question: –í–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞
            options: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ (2-10)
            is_anonymous: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å
            type: –¢–∏–ø –æ–ø—Ä–æ—Å–∞ (regular, quiz)
            allows_multiple_answers: –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤
            correct_option_id: ID –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è quiz)
            explanation: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–¥–ª—è quiz)
            explanation_entities: Entities –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            open_period: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            close_date: –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è (Unix timestamp)
            is_closed: –ó–∞–∫—Ä—ã—Ç –ª–∏ –æ–ø—Ä–æ—Å
            disable_notification: –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            protect_content: –ó–∞—â–∏—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
            reply_to_message_id: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            allow_sending_without_reply: –†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
            reply_markup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            Message –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üìä –ü—É–±–ª–∏–∫—É–µ–º –æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª {chat_id}")
            logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            logger.info(f"üìã –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(options)}")
            logger.info(f"üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π: {is_anonymous}")
            logger.info(f"üìù –¢–∏–ø: {type}")
            
            message = await self.bot.send_poll(
                chat_id=chat_id,
                question=question,
                options=options,
                is_anonymous=is_anonymous,
                type=type,
                allows_multiple_answers=allows_multiple_answers,
                correct_option_id=correct_option_id,
                explanation=explanation,
                explanation_entities=explanation_entities,
                open_period=open_period,
                close_date=close_date,
                is_closed=is_closed,
                disable_notification=disable_notification,
                protect_content=protect_content,
                reply_to_message_id=reply_to_message_id,
                allow_sending_without_reply=allow_sending_without_reply,
                reply_markup=reply_markup
            )
            
            logger.info(f"‚úÖ –û–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ID {message.message_id}")
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
            return None
    
    async def publish_post(
        self,
        post_data: Dict[str, Any],
        channel_ids: List[int],
        update_db: bool = True
    ) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
        
        Args:
            post_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ (id, body_md, entities, etc.)
            channel_ids: –°–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            update_db: –û–±–Ω–æ–≤–ª—è—Ç—å –ª–∏ –ë–î –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
        """
        logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç {post_data.get('id')} –≤ {len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤")
        
        results = {
            'success': [],
            'failed': [],
            'total_channels': len(channel_ids),
            'success_count': 0,
            'failed_count': 0
        }
        
        for channel_id in channel_ids:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª
                message = await self._publish_to_channel(post_data, channel_id)
                
                if message:
                    results['success'].append({
                        'channel_id': channel_id,
                        'message_id': message.message_id,
                        'message': message
                    })
                    results['success_count'] += 1
                    logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
                else:
                    results['failed'].append({
                        'channel_id': channel_id,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
                    })
                    results['failed_count'] += 1
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª {channel_id}")
                
            except Exception as e:
                results['failed'].append({
                    'channel_id': channel_id,
                    'error': str(e)
                })
                results['failed_count'] += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if update_db and results['success_count'] > 0:
            try:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π message_id –¥–ª—è –ë–î
                first_success = results['success'][0]
                await self._update_post_in_db(
                    post_data['id'], 
                    first_success['message_id']
                )
                logger.info(f"‚úÖ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {post_data['id']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {results['success_count']}/{results['total_channels']} —É—Å–ø–µ—à–Ω–æ")
        return results
    
    async def _publish_to_channel(self, post_data: Dict[str, Any], channel_id: int) -> Optional[Message]:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            text = post_data.get('body_md', '')
            entities = post_data.get('entities')
            media_data = post_data.get('media_data')
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            if media_data:
                logger.info(f"üì∑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞: {media_data['type']}")
                return await self._send_media_with_caption(
                    channel_id, 
                    media_data, 
                    text, 
                    entities
                )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å entities, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if entities:
                return await self._send_with_entities(channel_id, text, entities)
            
            # –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            return await self._send_with_auto_formatting(channel_id, text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return None
    
    async def _send_media_with_caption(
        self, 
        chat_id: int, 
        media_data: Dict[str, Any], 
        caption: str = "", 
        caption_entities: Optional[List] = None
    ) -> Optional[Message]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        try:
            media_type = media_data.get('type')
            file_id = media_data.get('file_id')
            
            if not media_type or not file_id:
                logger.error("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º entities –¥–ª—è caption
            caption_entities_list = None
            if caption_entities:
                from utils.entities import entities_from_dict
                caption_entities_list = entities_from_dict(caption_entities)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if media_type == "photo":
                return await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=file_id,
                    caption=caption,
                    caption_entities=caption_entities_list
                )
            elif media_type == "video":
                return await self.bot.send_video(
                    chat_id=chat_id,
                    video=file_id,
                    caption=caption,
                    caption_entities=caption_entities_list
                )
            elif media_type == "document":
                return await self.bot.send_document(
                    chat_id=chat_id,
                    document=file_id,
                    caption=caption,
                    caption_entities=caption_entities_list
                )
            elif media_type == "voice":
                return await self.bot.send_voice(
                    chat_id=chat_id,
                    voice=file_id,
                    caption=caption,
                    caption_entities=caption_entities_list
                )
            elif media_type == "audio":
                return await self.bot.send_audio(
                    chat_id=chat_id,
                    audio=file_id,
                    caption=caption,
                    caption_entities=caption_entities_list
                )
            elif media_type == "video_note":
                return await self.bot.send_video_note(
                    chat_id=chat_id,
                    video_note=file_id
                )
            else:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ {media_type}: {e}")
            return None
    
    async def _send_with_entities(
        self, 
        chat_id: int, 
        text: str, 
        entities: List[MessageEntity],
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[Message]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å entities (–Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
        try:
            return await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                entities=entities,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å entities: {e}")
            return None
    
    async def _send_with_parse_mode(
        self, 
        chat_id: int, 
        text: str, 
        parse_mode: ParseMode,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[Message]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º parse_mode"""
        try:
            return await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å parse_mode {parse_mode}: {e}")
            return None
    
    async def _send_with_auto_formatting(
        self, 
        chat_id: int, 
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> Optional[Message]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if self._has_markdown_formatting(text):
                logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                return await self.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
            else:
                logger.info("üìÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return await self.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup
                )
        except TelegramBadRequest as e:
            if "can't parse entities" in str(e).lower():
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return await self.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup
                )
            else:
                raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def _has_markdown_formatting(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        markdown_indicators = ['*', '_', '`', '[', ']', '(', ')']
        return any(indicator in text for indicator in markdown_indicators)
    
    async def _update_post_in_db(self, post_id: int, message_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ –ë–î –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            query = """
                UPDATE posts 
                SET status = 'published', 
                    published_at = NOW(),
                    message_id = $2,
                    updated_at = NOW()
                WHERE id = $1
            """
            await db.execute(query, post_id, message_id)
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î (message_id: {message_id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id} –≤ –ë–î: {e}")
            raise
    
    async def delete_message_from_channel(self, channel_id: int, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            await self.bot.delete_message(chat_id=channel_id, message_id=message_id)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            return True
        except Exception as e:
            error_msg = str(e)
            if "message to delete not found" in error_msg:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ bot.py)
publisher = None

def get_publisher() -> PostPublisher:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä PostPublisher"""
    if publisher is None:
        raise RuntimeError("PostPublisher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_publisher() –≤ bot.py")
    return publisher

def init_publisher(bot: Bot) -> PostPublisher:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç PostPublisher —Å –±–æ—Ç–æ–º"""
    global publisher
    publisher = PostPublisher(bot)
    logger.info("‚úÖ PostPublisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return publisher
