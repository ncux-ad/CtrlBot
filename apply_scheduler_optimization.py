–ê–Ω–¥—Ä–µ–π –î–∞–Ω–∏–ª–∏–Ω | –ü—Å–∏—Ö–∏–∞—Ç—Ä, –Ω–∞—Ä–∫–æ–ª–æ–≥ –ú–æ—Å–∫–≤–∞, [15.09.2025 04:31]
/add_channel

CtrlBot, [15.09.2025 04:31]
‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –∫–∞–Ω–∞–ª–µ
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel –≤ –∫–∞–Ω–∞–ª–µ.

–ê–Ω–¥—Ä–µ–π –î–∞–Ω–∏–ª–∏–Ω | –ü—Å–∏—Ö–∏–∞—Ç—Ä, –Ω–∞—Ä–∫–æ–ª–æ–≥ –ú–æ—Å–∫–≤–∞, [15.09.2025 04:46]
/add_channel

CtrlBot, [15.09.2025 04:46]
‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ PostScheduler
"""
import asyncio
import logging
from database import db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def apply_scheduler_optimization():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é PostScheduler"""
    try:
        logger.info("üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é PostScheduler...")
        
        # –ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        with open('deploy/migrations/add_scheduler_indexes.sql', 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        logger.info("üìä –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        await db.execute(migration_sql)
        
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PostScheduler –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_query = """
            SELECT 
                schemaname,
                tablename,
                indexname,
                indexdef
            FROM pg_indexes 
            WHERE tablename = 'posts' 
            AND indexname LIKE 'idx_posts_%'
            ORDER BY indexname
        """
        results = await db.fetch_all(stats_query)
        
        logger.info("üìà –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:")
        for row in results:
            logger.info(f"  - {row['indexname']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å—Ç–∞–º
        posts_stats = await db.fetch_all("""
            SELECT 
                status,
                COUNT(*) as count
            FROM posts 
            WHERE scheduled_at IS NOT NULL
            GROUP BY status
        """)
        
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤:")
        for row in posts_stats:
            logger.info(f"  - {row['status']}: {row['count']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    finally:
        await db.close()

if __name__ == "__main__":
    asyncio.run(apply_scheduler_optimization())
