"""
@file: handlers/reminder_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dependencies: services/reminder_service.py, utils/keyboards.py, utils/filters.py
@created: 2025-09-13
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from services.reminder_service import reminder_service
from utils.keyboards import get_main_menu_keyboard
from utils.filters import IsConfigAdminFilter
from utils.logging import get_logger
from utils.cron_parser import parse_cron_to_human
from database import db

logger = get_logger(__name__)
router = Router()

# –§–∏–ª—å—Ç—Ä—ã
admin_filter = IsConfigAdminFilter()

@router.message(Command("reminders"), admin_filter)
async def cmd_reminders(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        status = await reminder_service.get_scheduler_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        all_reminders = await reminder_service.get_all_reminders()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        reminders_text = ""
        if all_reminders:
            reminders_text = "\n\n*–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
            for reminder in all_reminders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                channel_title = reminder.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
                schedule_cron = reminder.get('schedule_cron', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                schedule_human = parse_cron_to_human(schedule_cron) if schedule_cron != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                enabled = "‚úÖ" if reminder.get('enabled') else "‚ùå"
                reminders_text += f"‚Ä¢ {enabled} {channel_title}: {schedule_human}\n"
        else:
            reminders_text = "\n\n*–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="my_reminders")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reminder_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
        
        await message.answer(
            f"‚è∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n\n"
            f"*–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:* {status_text}\n"
            f"*–í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:* {len(all_reminders)}"
            f"{reminders_text}",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error("Failed to show reminders menu: %s", e)
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "my_reminders", admin_filter)
async def callback_my_reminders(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        reminders = await reminder_service.get_all_reminders()
        
        if not reminders:
            await callback.message.edit_text(
                "üìã *–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_reminders")]
                ])
            )
        else:
            reminders_text = "üìã *–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
            for i, reminder in enumerate(reminders, 1):
                channel_title = reminder.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
                schedule_cron = reminder.get('schedule_cron', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                schedule_human = parse_cron_to_human(schedule_cron) if schedule_cron != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                enabled = "‚úÖ" if reminder.get('enabled') else "‚ùå"
                reminders_text += f"{i}. {enabled} *{channel_title}*\n"
                reminders_text += f"   üìÖ {schedule_human}\n"
                reminders_text += f"   ‚öôÔ∏è `{schedule_cron}`\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard_buttons = []
            for i, reminder in enumerate(reminders[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}",
                        callback_data=f"delete_reminder_{reminder['id']}"
                    )
                ])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_reminders")])
            
            await callback.message.edit_text(
                reminders_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
                parse_mode="Markdown"
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to show user reminders: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", show_alert=True)

@router.callback_query(F.data == "create_reminder", admin_filter)
async def callback_create_reminder(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        channels = await reminder_service.get_available_channels()
        
        if not channels:
            await callback.message.edit_text(
                "‚ùå *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤*\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_reminders")]
                ])
            )
        else:
            text = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            
            keyboard = []
            for channel in channels:
                keyboard.append([InlineKeyboardButton(
                    text=f"üì¢ {channel.get('title', '–ö–∞–Ω–∞–ª')}",
                    callback_data=f"select_channel_{channel['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_reminders")])
            
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
    except Exception as e:
        logger.error(f"Error in create_reminder: {e}")
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_reminders")]
            ])
        )
    await callback.answer()

@router.callback_query(F.data == "reminder_settings", admin_filter)
async def callback_reminder_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        status = await reminder_service.get_scheduler_status()
        scheduler_info = await reminder_service.get_scheduler_info()
        
        await callback.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
            f"*–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:* {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if status else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"*–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏:* {scheduler_info['jobs_count']}\n\n"
            "*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
            "‚Ä¢ 12:00 - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "‚Ä¢ 21:00 - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
            "–≠—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_reminders")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to show reminder settings: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data.startswith("delete_reminder_"), admin_filter)
async def callback_delete_reminder(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminder_id = int(callback.data.split("_")[2])
        
        success = await reminder_service.delete_reminder(reminder_id)
        
        if success:
            await callback.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await callback_my_reminders(callback)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", show_alert=True)
            
    except Exception as e:
        logger.error("Failed to delete reminder: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("select_channel_"), admin_filter)
async def callback_select_channel(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        channel_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel = await db.fetch_one(
            "SELECT id, title, tg_channel_id FROM channels WHERE id = $1", 
            channel_id
        )
        
        if not channel:
            await callback.message.edit_text(
                "‚ùå *–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_reminder")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await callback.message.edit_text(
            f"‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
            f"üì¢ *–ö–∞–Ω–∞–ª:* {channel['title']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåÖ 12:00 (–ø–æ–ª–¥–µ–Ω—å)", callback_data=f"set_time_{channel_id}_12:00")],
                [InlineKeyboardButton(text="üåÜ 21:00 (–≤–µ—á–µ—Ä)", callback_data=f"set_time_{channel_id}_21:00")],
                [InlineKeyboardButton(text="‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=f"custom_time_{channel_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_reminder")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error("Error in callback_select_channel: %s", e)
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_reminder")]
            ])
        )
        await callback.answer()

@router.callback_query(F.data.startswith("set_time_"), admin_filter)
async def callback_set_time(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: set_time_{channel_id}_{time}
        parts = callback.data.split("_")
        channel_id = int(parts[2])
        time_str = parts[3]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        cron_expression = f"0 {time_str.split(':')[1]} {time_str.split(':')[0]} * *"
        
        success = await reminder_service.create_reminder(
            channel_id=channel_id,
            kind="daily",
            schedule_cron=cron_expression,
            enabled=True
        )
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ*\n\n"
                f"‚è∞ *–í—Ä–µ–º—è:* {time_str}\n"
                f"üîÑ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* –ï–∂–µ–¥–Ω–µ–≤–Ω–æ\n\n"
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="manage_reminders")]
                ])
            )
        else:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_reminder")]
                ])
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Error in callback_set_time: %s", e)
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_reminder")]
            ])
        )
        await callback.answer()

@router.callback_query(F.data.startswith("custom_time_"), admin_filter)
async def callback_custom_time(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        channel_id = int(callback.data.split("_")[-1])
        
        await callback.message.edit_text(
            "‚è∞ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è*\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "`/create_reminder {channel_id} {cron_expression}`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã cron –≤—ã—Ä–∞–∂–µ–Ω–∏–π:\n"
            "‚Ä¢ `0 9 * * 1-5` - –∫–∞–∂–¥—ã–π –±—É–¥–Ω–∏–π –¥–µ–Ω—å –≤ 9:00\n"
            "‚Ä¢ `0 18 * * 0` - –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 18:00\n"
            "‚Ä¢ `0 12 1 * *` - 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00\n\n"
            f"ID –∫–∞–Ω–∞–ª–∞: `{channel_id}`",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_reminder")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error("Error in callback_custom_time: %s", e)
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_reminder")]
            ])
        )
        await callback.answer()

@router.callback_query(F.data == "manage_reminders", admin_filter)
async def callback_manage_reminders(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        status = await reminder_service.get_scheduler_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        all_reminders = await reminder_service.get_all_reminders()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        reminders_text = ""
        if all_reminders:
            reminders_text = "\n\n*–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
            for reminder in all_reminders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                channel_title = reminder.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
                schedule_cron = reminder.get('schedule_cron', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                schedule_human = parse_cron_to_human(schedule_cron) if schedule_cron != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                enabled = "‚úÖ" if reminder.get('enabled') else "‚ùå"
                reminders_text += f"‚Ä¢ {enabled} {channel_title}: {schedule_human}\n"
        else:
            reminders_text = "\n\n*–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="my_reminders")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reminder_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
        
        await callback.message.edit_text(
            f"‚è∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n\n"
            f"*–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:* {status_text}\n"
            f"*–í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:* {len(all_reminders)}"
            f"{reminders_text}",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error("Error in callback_manage_reminders: %s", e)
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_admin", admin_filter)
async def callback_back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.edit_text(
        "üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å CtrlAI_Bot*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    await message.answer(
        "üèì *Pong!*\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n"
        f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: < 1 —Å–µ–∫—É–Ω–¥—ã"
    )
