"""
@file: handlers/reminder_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dependencies: services/reminder_service.py, utils/keyboards.py, utils/filters.py
@created: 2025-09-13
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from services.reminder_service import reminder_service
from utils.keyboards import get_main_menu_keyboard
from utils.filters import IsConfigAdminFilter
from utils.logging import get_logger

logger = get_logger(__name__)
router = Router()

# –§–∏–ª—å—Ç—Ä—ã
admin_filter = IsConfigAdminFilter()

@router.message(Command("reminders"), admin_filter)
async def cmd_reminders(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        status = await reminder_service.get_scheduler_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_reminders = await reminder_service.get_user_reminders(message.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status["running"] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        jobs_text = f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {status['jobs_count']}"
        
        reminders_text = ""
        if user_reminders:
            reminders_text = "\n\n<b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
            for reminder in user_reminders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                time_str = reminder['scheduled_time'].strftime("%d.%m.%Y %H:%M")
                reminders_text += f"‚Ä¢ {time_str}: {reminder['message'][:50]}...\n"
        else:
            reminders_text = "\n\n<b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="my_reminders")],
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reminder_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
        
        await message.answer(
            f"‚è∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b> {status_text}\n"
            f"<b>{jobs_text}</b>"
            f"{reminders_text}",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error("Failed to show reminders menu: %s", e)
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "my_reminders", admin_filter)
async def callback_my_reminders(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        reminders = await reminder_service.get_user_reminders(callback.from_user.id)
        
        if not reminders:
            await callback.message.edit_text(
                "üìã <b>–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders")]
                ])
            )
        else:
            reminders_text = "üìã <b>–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            for i, reminder in enumerate(reminders, 1):
                time_str = reminder['scheduled_time'].strftime("%d.%m.%Y %H:%M")
                reminders_text += f"{i}. <b>{time_str}</b>\n"
                reminders_text += f"   {reminder['message']}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard_buttons = []
            for i, reminder in enumerate(reminders[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}",
                        callback_data=f"delete_reminder_{reminder['id']}"
                    )
                ])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders")])
            
            await callback.message.edit_text(
                reminders_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to show user reminders: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", show_alert=True)

@router.callback_query(F.data == "create_reminder", admin_filter)
async def callback_create_reminder(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "reminder_settings", admin_filter)
async def callback_reminder_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        status = await reminder_service.get_scheduler_status()
        
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b> {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"<b>–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {status['jobs_count']}\n\n"
            "<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ 12:00 - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "‚Ä¢ 21:00 - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
            "–≠—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to show reminder settings: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data.startswith("delete_reminder_"), admin_filter)
async def callback_delete_reminder(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminder_id = int(callback.data.split("_")[2])
        
        success = await reminder_service.delete_reminder(reminder_id, callback.from_user.id)
        
        if success:
            await callback.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await callback_my_reminders(callback)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", show_alert=True)
            
    except Exception as e:
        logger.error("Failed to delete reminder: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "back_to_admin", admin_filter)
async def callback_back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å CtrlBot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    await message.answer(
        "üèì <b>Pong!</b>\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n"
        f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: < 1 —Å–µ–∫—É–Ω–¥—ã"
    )
