# Handlers: Poll Creation
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from utils.states import PollCreationStates
from utils.logging import get_logger
from services.publisher import publisher
from database import db

logger = get_logger(__name__)
router = Router()

@router.message(PollCreationStates.enter_question)
async def process_poll_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ–ø—Ä–æ—Å–∞"""
    question = message.text.strip()
    
    if not question:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(question) > 300:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
    await state.update_data(question=question)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    await state.set_state(PollCreationStates.enter_options)
    await message.answer(
        "üìã **–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "Python\n"
        "JavaScript\n"
        "Java\n"
        "C++\n\n"
        "–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –º–∞–∫—Å–∏–º—É–º 10.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )

@router.message(PollCreationStates.enter_options)
async def process_poll_options(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    options_text = message.text.strip()
    
    if not options_text:
        await message.answer("‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    options = [opt.strip() for opt in options_text.split('\n') if opt.strip()]
    
    if len(options) < 2:
        await message.answer("‚ùå –ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(options) > 10:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for i, option in enumerate(options):
        if len(option) > 100:
            await message.answer(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {i+1} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    await state.update_data(options=options)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ–ø—Ä–æ—Å–∞
    await state.set_state(PollCreationStates.poll_settings)
    await message.answer(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø—Ä–æ—Å–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û–±—ã—á–Ω—ã–π –æ–ø—Ä–æ—Å", callback_data="poll_type_regular")],
            [InlineKeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="poll_type_quiz")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )

@router.callback_query(F.data.startswith("poll_type_"), PollCreationStates.poll_settings)
async def callback_poll_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø—Ä–æ—Å–∞"""
    poll_type = callback.data.split("_")[2]  # regular –∏–ª–∏ quiz
    
    await state.update_data(poll_type=poll_type)
    
    if poll_type == "quiz":
        # –î–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        data = await state.get_data()
        options = data.get('options', [])
        
        keyboard = []
        for i, option in enumerate(options):
            keyboard.append([InlineKeyboardButton(
                text=f"‚úÖ {option}" if i == 0 else option,
                callback_data=f"correct_option_{i}"
            )])
        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")])
        
        await callback.message.edit_text(
            "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**\n\n"
            "–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        # –û–±—ã—á–Ω—ã–π –æ–ø—Ä–æ—Å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await callback.message.edit_text(
            "‚öôÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å", callback_data="poll_anonymous_true")],
                [InlineKeyboardButton(text="üë§ –ü—É–±–ª–∏—á–Ω—ã–π –æ–ø—Ä–æ—Å", callback_data="poll_anonymous_false")],
                [InlineKeyboardButton(text="üìù –û–¥–∏–Ω –æ—Ç–≤–µ—Ç", callback_data="poll_multiple_false")],
                [InlineKeyboardButton(text="üìù –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤", callback_data="poll_multiple_true")],
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="poll_preview")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("correct_option_"), PollCreationStates.poll_settings)
async def callback_correct_option(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    option_index = int(callback.data.split("_")[2])
    
    await state.update_data(correct_option_id=option_index)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await callback.message.edit_text(
        "‚öôÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å", callback_data="poll_anonymous_true")],
            [InlineKeyboardButton(text="üë§ –ü—É–±–ª–∏—á–Ω—ã–π –æ–ø—Ä–æ—Å", callback_data="poll_anonymous_false")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="poll_preview")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("poll_"), PollCreationStates.poll_settings)
async def callback_poll_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ä–æ—Å–∞"""
    setting = callback.data.split("_")[1]  # anonymous, multiple, preview
    value = callback.data.split("_")[2]    # true, false, –∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è preview
    
    if setting == "anonymous":
        await state.update_data(is_anonymous=value == "true")
    elif setting == "multiple":
        await state.update_data(allows_multiple_answers=value == "true")
    elif setting == "preview":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await state.set_state(PollCreationStates.preview)
        await callback_poll_preview(callback, state)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    data = await state.get_data()
    is_anonymous = data.get('is_anonymous', True)
    allows_multiple = data.get('allows_multiple_answers', False)
    
    await callback.message.edit_text(
        "‚öôÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        f"üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π: {'‚úÖ' if is_anonymous else '‚ùå'}\n"
        f"üìù –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤: {'‚úÖ' if allows_multiple else '‚ùå'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å", callback_data="poll_anonymous_true")],
            [InlineKeyboardButton(text="üë§ –ü—É–±–ª–∏—á–Ω—ã–π –æ–ø—Ä–æ—Å", callback_data="poll_anonymous_false")],
            [InlineKeyboardButton(text="üìù –û–¥–∏–Ω –æ—Ç–≤–µ—Ç", callback_data="poll_multiple_false")],
            [InlineKeyboardButton(text="üìù –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤", callback_data="poll_multiple_true")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="poll_preview")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "poll_preview", PollCreationStates.preview)
async def callback_poll_preview(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    
    question = data.get('question', '')
    options = data.get('options', [])
    poll_type = data.get('poll_type', 'regular')
    is_anonymous = data.get('is_anonymous', True)
    allows_multiple = data.get('allows_multiple_answers', False)
    correct_option_id = data.get('correct_option_id')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = f"üìä **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—Ä–æ—Å–∞**\n\n"
    preview_text += f"‚ùì **–í–æ–ø—Ä–æ—Å:** {question}\n\n"
    preview_text += f"üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:**\n"
    for i, option in enumerate(options):
        if poll_type == "quiz" and i == correct_option_id:
            preview_text += f"‚úÖ {option}\n"
        else:
            preview_text += f"‚Ä¢ {option}\n"
    
    preview_text += f"\n‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
    preview_text += f"‚Ä¢ –¢–∏–ø: {'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞' if poll_type == 'quiz' else '–û–±—ã—á–Ω—ã–π –æ–ø—Ä–æ—Å'}\n"
    preview_text += f"‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–π: {'–î–∞' if is_anonymous else '–ù–µ—Ç'}\n"
    if poll_type == "regular":
        preview_text += f"‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤: {'–î–∞' if allows_multiple else '–ù–µ—Ç'}\n"
    
    await callback.message.edit_text(
        preview_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="poll_schedule")],
            [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="poll_publish_now")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="poll_edit")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "poll_publish_now", PollCreationStates.preview)
async def callback_poll_publish_now(callback: CallbackQuery, state: FSMContext):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–ø—Ä–æ—Å–∞ —Å–µ–π—á–∞—Å"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
    channels = await db.fetch_all("SELECT id, tg_channel_id, title FROM channels")
    
    if not channels:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!")
        return
    
    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞)
    channel = channels[0]
    channel_id = channel['tg_channel_id']
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –æ–ø—Ä–æ—Å
        message = await publisher.publish_poll(
            chat_id=channel_id,
            question=data.get('question', ''),
            options=data.get('options', []),
            is_anonymous=data.get('is_anonymous', True),
            type=data.get('poll_type', 'regular'),
            allows_multiple_answers=data.get('allows_multiple_answers', False),
            correct_option_id=data.get('correct_option_id'),
        )
        
        if message:
            await callback.message.edit_text(
                "‚úÖ **–û–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!**\n\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {channel['title']}\n"
                f"üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
            await callback.answer("‚úÖ –û–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
    
    except Exception as e:
        logger.error(f"Error publishing poll: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "poll_edit", PollCreationStates.preview)
async def callback_poll_edit(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    await state.set_state(PollCreationStates.enter_question)
    await callback.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "poll_schedule", PollCreationStates.preview)
async def callback_poll_schedule(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    await state.set_state(PollCreationStates.schedule)
    await callback.message.edit_text(
        "üìÖ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å", callback_data="poll_schedule_hour")],
            [InlineKeyboardButton(text="üåÖ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º (09:00)", callback_data="poll_schedule_tomorrow_morning")],
            [InlineKeyboardButton(text="üåÜ –ó–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º (21:00)", callback_data="poll_schedule_tomorrow_evening")],
            [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data="poll_schedule_custom")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
@router.callback_query(F.data == "poll_schedule_hour", PollCreationStates.schedule)
async def callback_poll_schedule_hour(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —á–∞—Å –≤–ø–µ—Ä–µ–¥"""
    from datetime import datetime, timedelta
    
    scheduled_time = datetime.now() + timedelta(hours=1)
    await state.update_data(scheduled_at=scheduled_time)
    
    await callback.message.edit_text(
        f"‚è∞ **–û–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}**\n\n"
        "–û–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )
    await callback.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
    await state.clear()

@router.callback_query(F.data == "poll_schedule_tomorrow_morning", PollCreationStates.schedule)
async def callback_poll_schedule_tomorrow_morning(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º"""
    from datetime import datetime, timedelta
    
    tomorrow = datetime.now() + timedelta(days=1)
    scheduled_time = tomorrow.replace(hour=9, minute=0, second=0, microsecond=0)
    await state.update_data(scheduled_at=scheduled_time)
    
    await callback.message.edit_text(
        f"üåÖ **–û–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º ({scheduled_time.strftime('%d.%m.%Y %H:%M')})**\n\n"
        "–û–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )
    await callback.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
    await state.clear()

@router.callback_query(F.data == "poll_schedule_tomorrow_evening", PollCreationStates.schedule)
async def callback_poll_schedule_tomorrow_evening(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º"""
    from datetime import datetime, timedelta
    
    tomorrow = datetime.now() + timedelta(days=1)
    scheduled_time = tomorrow.replace(hour=21, minute=0, second=0, microsecond=0)
    await state.update_data(scheduled_at=scheduled_time)
    
    await callback.message.edit_text(
        f"üåÜ **–û–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º ({scheduled_time.strftime('%d.%m.%Y %H:%M')})**\n\n"
        "–û–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )
    await callback.answer("‚úÖ –û–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
    await state.clear()

@router.callback_query(F.data == "poll_schedule_custom", PollCreationStates.schedule)
async def callback_poll_schedule_custom(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(PollCreationStates.enter_time)
    await callback.message.edit_text(
        "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
        "–ü—Ä–∏–º–µ—Ä: 20.12.2024 15:30",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ])
    )
    await callback.answer()

@router.message(PollCreationStates.enter_time)
async def process_poll_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    from datetime import datetime
    
    try:
        time_str = message.text.strip()
        scheduled_time = datetime.strptime(time_str, '%d.%m.%Y %H:%M')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_time <= datetime.now():
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(scheduled_at=scheduled_time)
        
        await message.answer(
            f"‚úÖ **–û–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}**\n\n"
            "–û–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n–ü—Ä–∏–º–µ—Ä: 20.12.2024 15:30")
