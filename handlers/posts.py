"""
@file: handlers/posts.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
@dependencies: services/posts.py, utils/keyboards.py, utils/states.py
@created: 2025-09-13
"""

import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

# –£–¥–∞–ª–µ–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º KISS –ø—Ä–∏–Ω—Ü–∏–ø

from services.posts import post_service
from services.tags import tag_service
from utils.keyboards import (
    get_main_menu_keyboard,
    get_post_actions_keyboard,
    get_tags_keyboard,
    get_series_keyboard,
    get_schedule_keyboard,
    get_confirmation_keyboard
)
from utils.states import PostCreationStates
from utils.filters import IsConfigAdminFilter, PostTextFilter
from utils.logging import get_logger

logger = get_logger(__name__)
router = Router()

# –§–∏–ª—å—Ç—Ä—ã
admin_filter = IsConfigAdminFilter()
text_filter = PostTextFilter()

def convert_markdown_to_telegram(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown –≤ Telegram MarkdownV2"""
    logger.info(f"üîÑ convert_markdown_to_telegram: –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: '{text}'")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    # –ï—Å–ª–∏ –µ—Å—Ç—å ``` –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º ```
    triple_backticks_count = text.count('```')
    if triple_backticks_count % 2 == 1:
        text += '```'
        logger.info("üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ –∫–æ–¥–∞")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ - –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
    code_blocks = []
    code_pattern = r'```([^`]*?)```'
    code_matches = re.findall(code_pattern, text, re.DOTALL)
    for i, code_content in enumerate(code_matches):
        placeholder = f"__CODE_BLOCK_{i}__"
        code_blocks.append(code_content)
        text = text.replace(f"```{code_content}```", placeholder)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    single_backticks = []
    single_code_pattern = r'`([^`]+)`'
    single_matches = re.findall(single_code_pattern, text)
    for i, code_content in enumerate(single_matches):
        placeholder = f"__SINGLE_CODE_{i}__"
        single_backticks.append(code_content)
        text = text.replace(f"`{code_content}`", placeholder)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–ª—è Telegram MarkdownV2
    # *–∂–∏—Ä–Ω—ã–π* -> **–∂–∏—Ä–Ω—ã–π** (–∂–∏—Ä–Ω—ã–π)
    before_bold = text
    text = re.sub(r'(?<!\*)\*([^*]+)\*(?!\*)', r'**\1**', text)
    if before_bold != text:
        logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∂–∏—Ä–Ω–æ–≥–æ: '{before_bold}' -> '{text}'")
    
    # _–∫—É—Ä—Å–∏–≤_ -> *–∫—É—Ä—Å–∏–≤* (–∫—É—Ä—Å–∏–≤, –ù–ï –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ!)
    before_italic = text
    text = re.sub(r'(?<![a-zA-Z0-9])_([^_]+)_(?![a-zA-Z0-9])', r'*\1*', text)
    if before_italic != text:
        logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—É—Ä—Å–∏–≤–∞: '{before_italic}' -> '{text}'")
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: _ * [ ] ( ) ~ ` > # + - = | { } . !
    before_escape = text
    escape_chars = r'\_\*\[\]\(\)~`>#\+\-=|{}\.!'
    for char in escape_chars:
        if char not in ['*', '_', '[', ']', '(', ')', '`']:  # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text = text.replace(char, f'\\{char}')
    
    if before_escape != text:
        logger.info(f"üîÑ –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: '{before_escape}' -> '{text}'")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    for i, code_content in enumerate(code_blocks):
        placeholder = f"__CODE_BLOCK_{i}__"
        text = text.replace(placeholder, f"```{code_content}```")
    
    for i, code_content in enumerate(single_backticks):
        placeholder = f"__SINGLE_CODE_{i}__"
        text = text.replace(placeholder, f"`{code_content}`")
    
    logger.info(f"üîÑ convert_markdown_to_telegram: —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{text}'")
    return text

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Telegram Markdown"""
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram Markdown
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –£–¥–∞–ª–µ–Ω–∞ —Å–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º KISS –ø—Ä–∏–Ω—Ü–∏–ø

@router.message(Command("new_post"), admin_filter)
async def cmd_new_post(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreationStates.enter_text)
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ - –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.\n\n"
        "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ *–∂–∏—Ä–Ω—ã–π* ‚Üí **–∂–∏—Ä–Ω—ã–π**\n"
        "‚Ä¢ _–∫—É—Ä—Å–∏–≤_ ‚Üí __–∫—É—Ä—Å–∏–≤__\n"
        "‚Ä¢ `–∫–æ–¥` ‚Üí `–∫–æ–¥`\n"
        "‚Ä¢ [—Å—Å—ã–ª–∫–∞](url) ‚Üí [—Å—Å—ã–ª–∫–∞](url)\n\n"
        "‚úÖ <b>–ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Obsidian, .md —Ñ–∞–π–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤!</b>",
        reply_markup=get_post_actions_keyboard()
    )

# –£–¥–∞–ª–µ–Ω - –∑–∞–º–µ–Ω–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

# –£–¥–∞–ª–µ–Ω - –∑–∞–º–µ–Ω–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

# –£–¥–∞–ª–µ–Ω - –∑–∞–º–µ–Ω–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

@router.callback_query(F.data == "preview_post", StateFilter(PostCreationStates.preview))
async def callback_preview_post(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    logger.info("=== –ü–û–í–¢–û–†–ù–´–ô –ü–†–ï–î–ü–†–û–°–ú–û–¢–† ===")
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    logger.info(f"üìù –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: '{post_text}'")
    
    try:
        logger.info("üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å parse_mode='MarkdownV2'")
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è MarkdownV2
        preview_text = f"üëÅÔ∏è *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{post_text}"
        await callback.message.edit_text(
            preview_text,
            parse_mode="MarkdownV2",
            reply_markup=get_post_actions_keyboard()
        )
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å parse_mode='MarkdownV2'")
        preview_text = f"üëÅÔ∏è *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{post_text}"
        await callback.message.answer(
            preview_text,
            parse_mode="MarkdownV2",
            reply_markup=get_post_actions_keyboard()
        )
        logger.info("‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await callback.answer()

@router.callback_query(F.data == "markdown_example")
async def callback_markdown_example(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    example_text = """
üìù <b>–ü—Ä–∏–º–µ—Ä Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>

*–≠—Ç–æ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*
_–≠—Ç–æ –∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç_
`–≠—Ç–æ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥`

```–±–ª–æ–∫ –∫–æ–¥–∞
function hello() {
    console.log("–ü—Ä–∏–≤–µ—Ç!");
}
```

[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç](https://example.com)

<b>–°–ø–∏—Å–∫–∏:</b>
‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
‚Ä¢ –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç
‚Ä¢ –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç

<b>–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>
1. –ü–µ—Ä–≤—ã–π
2. –í—Ç–æ—Ä–æ–π  
3. –¢—Ä–µ—Ç–∏–π

<b>–¶–∏—Ç–∞—Ç–∞:</b>
> –≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞
> –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π

<b>–≠–º–æ–¥–∑–∏:</b> üòÄ üöÄ üí° üìù ‚úÖ ‚ùå
    """
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É"
    if post_text:
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É", callback_data="back_to_preview")]]
    else:
        keyboard = [[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    
    await callback.message.answer(
        example_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_preview")
async def callback_back_to_preview(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    if not post_text:
        await callback.message.answer(
            "‚ùå <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /new_post",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    else:
        await state.set_state(PostCreationStates.preview)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è MarkdownV2
        preview_text = f"üëÅÔ∏è *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{post_text}"
        await callback.message.answer(
            preview_text,
            parse_mode="MarkdownV2",
            reply_markup=get_post_actions_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main_from_example(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ Markdown"""
    await state.clear()
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="view_posts")],
            [InlineKeyboardButton(text="ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_functions")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="channel_settings")],
            [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞", callback_data="get_channel_id")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "add_tags", StateFilter(PostCreationStates.preview))
async def callback_add_tags(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–µ–≥–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∫–∞–Ω–∞–ª–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ –ë–î
    tags = [
        {"id": 1, "name": "–Ω–æ–≤–æ—Å—Ç–∏"},
        {"id": 2, "name": "–∞–Ω–æ–Ω—Å—ã"},
        {"id": 3, "name": "–æ–±—ä—è–≤–ª–µ–Ω–∏—è"},
        {"id": 4, "name": "–≤–∞–∂–Ω–æ"}
    ]
    
    await state.set_state(PostCreationStates.add_tags)
    await callback.message.edit_text(
        "üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞:</b>\n\n"
        "–û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=get_tags_keyboard(tags)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_tag_"), StateFilter(PostCreationStates.add_tags))
async def callback_toggle_tag(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞"""
    tag_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
    data = await state.get_data()
    selected_tags = data.get('selected_tags', [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–≥
    if tag_id in selected_tags:
        selected_tags.remove(tag_id)
    else:
        selected_tags.append(tag_id)
    
    await state.update_data(selected_tags=selected_tags)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    tags = [
        {"id": 1, "name": "–Ω–æ–≤–æ—Å—Ç–∏"},
        {"id": 2, "name": "–∞–Ω–æ–Ω—Å—ã"},
        {"id": 3, "name": "–æ–±—ä—è–≤–ª–µ–Ω–∏—è"},
        {"id": 4, "name": "–≤–∞–∂–Ω–æ"}
    ]
    
    await callback.message.edit_reply_markup(
        reply_markup=get_tags_keyboard(tags, selected_tags)
    )
    await callback.answer()

@router.callback_query(F.data == "tags_done", StateFilter(PostCreationStates.add_tags))
async def callback_tags_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤"""
    data = await state.get_data()
    selected_tags = data.get('selected_tags', [])
    
    if not selected_tags:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ä–∏–∏
    await state.set_state(PostCreationStates.choose_series)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    # TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏ –∏–∑ –ë–î
    series = [
        {"id": 1, "title": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", "next_number": 5},
        {"id": 2, "title": "–ê–Ω–æ–Ω—Å—ã —Å–æ–±—ã—Ç–∏–π", "next_number": 12}
    ]
    
    await callback.message.edit_text(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç–∞:</b>\n\n"
        "–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏.",
        reply_markup=get_series_keyboard(series)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_series_"), StateFilter(PostCreationStates.choose_series))
async def callback_select_series(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[2])
    await state.update_data(series_id=series_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    await state.set_state(PostCreationStates.schedule)
    await callback.message.edit_text(
        "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
        reply_markup=get_schedule_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "skip_series", StateFilter(PostCreationStates.choose_series))
async def callback_skip_series(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–∏"""
    await state.update_data(series_id=None)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    await state.set_state(PostCreationStates.schedule)
    await callback.message.edit_text(
        "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
        reply_markup=get_schedule_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "schedule_now", StateFilter(PostCreationStates.schedule))
async def callback_schedule_now(callback: CallbackQuery, state: FSMContext):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–µ–π—á–∞—Å"""
    await state.update_data(scheduled_at=None)
    await state.set_state(PostCreationStates.confirm)
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> –°–µ–π—á–∞—Å\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {len(data.get('selected_tags', []))} –≤—ã–±—Ä–∞–Ω–æ\n"
        f"üìö <b>–°–µ—Ä–∏—è:</b> {'–î–∞' if data.get('series_id') else '–ù–µ—Ç'}",
        reply_markup=get_confirmation_keyboard("publish")
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_publish", StateFilter(PostCreationStates.confirm))
async def callback_confirm_publish(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –ë–î
        # post_id = await post_service.create_post(...)
        
        await callback.message.edit_text(
            "‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            "–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error("Failed to create post: %s", e)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    await callback.answer()

@router.callback_query(F.data == "cancel_publish", StateFilter(PostCreationStates.confirm))
async def callback_cancel_publish(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_post –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞."
    )
    await callback.answer()

@router.callback_query(F.data == "publish_post", StateFilter(PostCreationStates.preview))
async def callback_publish_post(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    logger.info("=== –ù–ê–ß–ê–õ–û –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ü–û–°–¢–ê ===")
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: '{post_text}'")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config import config
        channel_ids = getattr(config, 'CHANNEL_IDS', [])
        logger.info(f"üì¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {channel_ids}")
        
        if not channel_ids:
            logger.warning("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            await callback.message.edit_text(
                "‚ùå <b>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
                "2. –ù–∞–∂–º–∏—Ç–µ 'üîó –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞'\n"
                "3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await callback.answer()
            return
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        published_channels = []
        failed_channels = []
        
        for channel_id in channel_ids:
            try:
                logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª {channel_id}")
                logger.info(f"üìù –¢–µ–∫—Å—Ç: '{post_text}'")
                logger.info(f"üîß parse_mode: 'MarkdownV2'")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                sent_message = await callback.bot.send_message(
                    chat_id=channel_id,
                    text=post_text,
                    parse_mode="MarkdownV2"
                )
                
                published_channels.append(channel_id)
                logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
                logger.info(f"üì® ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.message_id}")
                
            except Exception as e:
                failed_channels.append((channel_id, str(e)))
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if published_channels:
            result_text = f"‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
            result_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
            result_text += f"üì¢ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ã:</b> {len(published_channels)}\n"
            
            if failed_channels:
                result_text += f"‚ùå <b>–û—à–∏–±–∫–∏:</b> {len(failed_channels)} –∫–∞–Ω–∞–ª–æ–≤\n"
        else:
            result_text = "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç</b>\n\n"
            result_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
            result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö."
        
        await callback.message.edit_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç –≤ –ë–î
        # post_id = await post_service.create_post(...)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error("Failed to publish post: %s", e)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data == "cancel_post")
async def callback_cancel_post(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await state.clear()
    try:
        await callback.message.edit_text(
            "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logger.warning("Failed to edit message in cancel_post: %s", e)
    await callback.answer()

@router.message(Command("my_posts"), admin_filter)
async def cmd_my_posts(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –ë–î
    await message.answer(
        "üìã <b>–ú–æ–∏ –ø–æ—Å—Ç—ã</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ <b>CtrlBot - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/new_post - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
/my_posts - –ú–æ–∏ –ø–æ—Å—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
/config - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

<b>Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
*–∂–∏—Ä–Ω—ã–π* - –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
_–∫—É—Ä—Å–∏–≤_ - –∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç
`–∫–æ–¥` - –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥
```–±–ª–æ–∫ –∫–æ–¥–∞``` - –±–ª–æ–∫ –∫–æ–¥–∞
[—Å—Å—ã–ª–∫–∞](url) - —Å—Å—ã–ª–∫–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await message.answer(
        help_text, 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

@router.message(StateFilter(PostCreationStates.enter_text))
async def process_any_post_message(message: Message, state: FSMContext):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    logger.info("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        text = message.text.strip()
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{text}'")
    elif message.caption:
        text = message.caption.strip()
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω caption: '{text}'")
    else:
        logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
        await message.answer("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç</b>\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞")
    is_valid, error_msg = await post_service.validate_post_text(text)
    if not is_valid:
        logger.warning(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {error_msg}")
        await message.answer(f"‚ùå {error_msg}")
        return
    logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown –≤ Telegram Markdown
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Markdown")
    logger.info(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'")
    converted_text = convert_markdown_to_telegram(text)
    logger.info(f"üì§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{converted_text}'")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ FSM state")
    await state.update_data(post_text=converted_text)
    await state.set_state(PostCreationStates.preview)
    logger.info("‚úÖ FSM state –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    logger.info("üëÅÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å parse_mode='MarkdownV2'")
    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è MarkdownV2
        preview_text = f"üëÅÔ∏è *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{converted_text}"
        await message.answer(
            preview_text,
            parse_mode="MarkdownV2",
            reply_markup=get_post_actions_keyboard()
        )
        logger.info("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            f"üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:\n\n{converted_text}",
            reply_markup=get_post_actions_keyboard()
        )
        logger.info("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    logger.info("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===")

@router.message()
async def handle_unknown(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )
