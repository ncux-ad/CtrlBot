"""
@file: handlers/post_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
@dependencies: services/post_service.py, utils/keyboards.py, utils/states.py
@created: 2025-09-13
"""

import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

# –£–¥–∞–ª–µ–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º KISS –ø—Ä–∏–Ω—Ü–∏–ø

from services.post_service import post_service
from services.tags import tag_service
from services.series import series_service
from utils.keyboards import (
    get_main_menu_keyboard,
    get_post_actions_keyboard,
    get_tags_keyboard,
    get_series_keyboard,
    get_schedule_keyboard,
    get_confirmation_keyboard
)
from utils.timezone_utils import format_datetime
from utils.states import PostCreationStates
from utils.filters import IsConfigAdminFilter, PostTextFilter
from utils.logging import get_logger

logger = get_logger(__name__)
router = Router()

# –§–∏–ª—å—Ç—Ä—ã
admin_filter = IsConfigAdminFilter()
text_filter = PostTextFilter()

# –£–±—Ä–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Telegram Markdown"""
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram Markdown
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –£–¥–∞–ª–µ–Ω–∞ —Å–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º KISS –ø—Ä–∏–Ω—Ü–∏–ø

@router.message(Command("new_post"), admin_filter)
async def cmd_new_post(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreationStates.enter_text)
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ - –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.\n\n"
        "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ *–∂–∏—Ä–Ω—ã–π* ‚Üí **–∂–∏—Ä–Ω—ã–π**\n"
        "‚Ä¢ _–∫—É—Ä—Å–∏–≤_ ‚Üí __–∫—É—Ä—Å–∏–≤__\n"
        "‚Ä¢ `–∫–æ–¥` ‚Üí `–∫–æ–¥`\n"
        "‚Ä¢ [—Å—Å—ã–ª–∫–∞](url) ‚Üí [—Å—Å—ã–ª–∫–∞](url)\n\n"
        "‚úÖ <b>–ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Obsidian, .md —Ñ–∞–π–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤!</b>",
        reply_markup=get_post_actions_keyboard()
    )

# –£–¥–∞–ª–µ–Ω - –∑–∞–º–µ–Ω–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

# –£–¥–∞–ª–µ–Ω - –∑–∞–º–µ–Ω–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

# –£–¥–∞–ª–µ–Ω - –∑–∞–º–µ–Ω–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

@router.callback_query(F.data == "preview_post", StateFilter(PostCreationStates.preview))
async def callback_preview_post(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    logger.info("=== –ü–û–í–¢–û–†–ù–´–ô –ü–†–ï–î–ü–†–û–°–ú–û–¢–† ===")
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    logger.info(f"üìù –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: '{post_text}'")
    
    try:
        logger.info("üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await callback.message.edit_text(
            f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{post_text}",
            reply_markup=get_post_actions_keyboard()
        )
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await callback.message.answer(
            f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{post_text}",
            reply_markup=get_post_actions_keyboard()
        )
        logger.info("‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await callback.answer()

@router.callback_query(F.data == "markdown_example")
async def callback_markdown_example(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    example_text = """
üìù <b>–ü—Ä–∏–º–µ—Ä Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>

*–≠—Ç–æ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*
_–≠—Ç–æ –∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç_
`–≠—Ç–æ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥`

```–±–ª–æ–∫ –∫–æ–¥–∞
function hello() {
    console.log("–ü—Ä–∏–≤–µ—Ç!");
}
```

[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç](https://example.com)

<b>–°–ø–∏—Å–∫–∏:</b>
‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
‚Ä¢ –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç
‚Ä¢ –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç

<b>–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>
1. –ü–µ—Ä–≤—ã–π
2. –í—Ç–æ—Ä–æ–π  
3. –¢—Ä–µ—Ç–∏–π

<b>–¶–∏—Ç–∞—Ç–∞:</b>
> –≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞
> –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π

<b>–≠–º–æ–¥–∑–∏:</b> üòÄ üöÄ üí° üìù ‚úÖ ‚ùå
    """
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É"
    if post_text:
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É", callback_data="back_to_preview")]]
    else:
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]]
    
    await callback.message.answer(
        example_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_preview")
async def callback_back_to_preview(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    if not post_text:
        await callback.message.answer(
            "‚ùå <b>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /new_post",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
    else:
        await state.set_state(PostCreationStates.preview)
        await callback.message.answer(
            f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{post_text}",
            reply_markup=get_post_actions_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_admin")
async def callback_back_to_admin_from_example(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ Markdown"""
    await state.clear()
    await callback.message.answer(
        "üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å CtrlBot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="view_posts")],
            [InlineKeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ", callback_data="check_scheduled_posts")],
            [InlineKeyboardButton(text="üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã", callback_data="fix_post_status")],
            [InlineKeyboardButton(text="ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_functions")],
            [InlineKeyboardButton(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data="manage_tags")],
            [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏", callback_data="manage_series")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="manage_reminders")],
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="channel_settings")],
            [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞", callback_data="get_channel_id")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "schedule_post", StateFilter(PostCreationStates.preview))
async def callback_schedule_post(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞"""
    await state.set_state(PostCreationStates.schedule)
    await callback.message.edit_text(
        "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
        reply_markup=get_schedule_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "add_tags", StateFilter(PostCreationStates.preview))
async def callback_add_tags(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–µ–≥–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config import config
        channel_ids = getattr(config, 'CHANNEL_IDS', [])
        
        if not channel_ids:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channel_id = channel_ids[0]
        tags = await tag_service.get_tags_by_channel(channel_id)
        
        if not tags:
            await callback.message.edit_text(
                "üè∑Ô∏è <b>–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É", callback_data="back_to_preview")]
                ])
            )
        else:
            await state.set_state(PostCreationStates.add_tags)
            await callback.message.edit_text(
                "üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞:</b>\n\n"
                "–û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
                reply_markup=get_tags_keyboard(tags)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_tag_"), StateFilter(PostCreationStates.add_tags))
async def callback_toggle_tag(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞"""
    tag_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
    data = await state.get_data()
    selected_tags = data.get('selected_tags', [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–≥
    if tag_id in selected_tags:
        selected_tags.remove(tag_id)
    else:
        selected_tags.append(tag_id)
    
    await state.update_data(selected_tags=selected_tags)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    tags = [
        {"id": 1, "name": "–Ω–æ–≤–æ—Å—Ç–∏"},
        {"id": 2, "name": "–∞–Ω–æ–Ω—Å—ã"},
        {"id": 3, "name": "–æ–±—ä—è–≤–ª–µ–Ω–∏—è"},
        {"id": 4, "name": "–≤–∞–∂–Ω–æ"}
    ]
    
    await callback.message.edit_reply_markup(
        reply_markup=get_tags_keyboard(tags, selected_tags)
    )
    await callback.answer()

@router.callback_query(F.data == "tags_done", StateFilter(PostCreationStates.add_tags))
async def callback_tags_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤"""
    data = await state.get_data()
    selected_tags = data.get('selected_tags', [])
    
    if not selected_tags:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ä–∏–∏
    await state.set_state(PostCreationStates.choose_series)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config import config
        channel_ids = getattr(config, 'CHANNEL_IDS', [])
        
        if not channel_ids:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channel_id = channel_ids[0]
        series = await series_service.get_series_by_channel(channel_id)
        
        if not series:
            await callback.message.edit_text(
                "üìö <b>–°–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É", callback_data="back_to_preview")]
                ])
            )
        else:
            await callback.message.edit_text(
                "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç–∞:</b>\n\n"
                "–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏.",
                reply_markup=get_series_keyboard(series)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–π", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("select_series_"), StateFilter(PostCreationStates.choose_series))
async def callback_select_series(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[2])
    await state.update_data(series_id=series_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    await state.set_state(PostCreationStates.schedule)
    await callback.message.edit_text(
        "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
        reply_markup=get_schedule_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "skip_series", StateFilter(PostCreationStates.choose_series))
async def callback_skip_series(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–∏"""
    await state.update_data(series_id=None)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    await state.set_state(PostCreationStates.schedule)
    await callback.message.edit_text(
        "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
        reply_markup=get_schedule_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "schedule_now", StateFilter(PostCreationStates.schedule))
async def callback_schedule_now(callback: CallbackQuery, state: FSMContext):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–µ–π—á–∞—Å"""
    await state.update_data(scheduled_at=None)
    await state.set_state(PostCreationStates.confirm)
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> –°–µ–π—á–∞—Å\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {len(data.get('selected_tags', []))} –≤—ã–±—Ä–∞–Ω–æ\n"
        f"üìö <b>–°–µ—Ä–∏—è:</b> {'–î–∞' if data.get('series_id') else '–ù–µ—Ç'}",
        reply_markup=get_confirmation_keyboard("publish")
    )
    await callback.answer()

@router.callback_query(F.data == "schedule_hour", StateFilter(PostCreationStates.schedule))
async def callback_schedule_hour(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å"""
    from utils.timezone_utils import get_in_hours
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å")
    scheduled_at = get_in_hours(1)
    logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {scheduled_at}")
    
    await state.update_data(scheduled_at=scheduled_at)
    await state.set_state(PostCreationStates.confirm)
    logger.info("‚úÖ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: confirm")
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {format_datetime(scheduled_at)}\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {len(data.get('selected_tags', []))} –≤—ã–±—Ä–∞–Ω–æ\n"
        f"üìö <b>–°–µ—Ä–∏—è:</b> {'–î–∞' if data.get('series_id') else '–ù–µ—Ç'}",
        reply_markup=get_confirmation_keyboard("publish")
    )
    await callback.answer()

@router.callback_query(F.data == "schedule_tomorrow_morning", StateFilter(PostCreationStates.schedule))
async def callback_schedule_tomorrow_morning(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º"""
    from utils.timezone_utils import get_tomorrow_morning
    
    scheduled_at = get_tomorrow_morning(9, 0)
    await state.update_data(scheduled_at=scheduled_at)
    await state.set_state(PostCreationStates.confirm)
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {format_datetime(scheduled_at)}\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {len(data.get('selected_tags', []))} –≤—ã–±—Ä–∞–Ω–æ\n"
        f"üìö <b>–°–µ—Ä–∏—è:</b> {'–î–∞' if data.get('series_id') else '–ù–µ—Ç'}",
        reply_markup=get_confirmation_keyboard("publish")
    )
    await callback.answer()

@router.callback_query(F.data == "schedule_tomorrow_evening", StateFilter(PostCreationStates.schedule))
async def callback_schedule_tomorrow_evening(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º"""
    from utils.timezone_utils import get_tomorrow_evening
    
    scheduled_at = get_tomorrow_evening(21, 0)
    await state.update_data(scheduled_at=scheduled_at)
    await state.set_state(PostCreationStates.confirm)
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {format_datetime(scheduled_at)}\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {len(data.get('selected_tags', []))} –≤—ã–±—Ä–∞–Ω–æ\n"
        f"üìö <b>–°–µ—Ä–∏—è:</b> {'–î–∞' if data.get('series_id') else '–ù–µ—Ç'}",
        reply_markup=get_confirmation_keyboard("publish")
    )
    await callback.answer()

@router.callback_query(F.data == "schedule_custom", StateFilter(PostCreationStates.schedule))
async def callback_schedule_custom(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(PostCreationStates.enter_time)
    
    await callback.message.edit_text(
        "üìÖ <b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ <code>15:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
        "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ 15:30</code> - –∑–∞–≤—Ç—Ä–∞ –≤ 15:30\n"
        "‚Ä¢ <code>25.12.2024 15:30</code> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_schedule")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "cancel_schedule", StateFilter(PostCreationStates.schedule))
async def callback_cancel_schedule(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.set_state(PostCreationStates.preview)
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    await callback.message.edit_text(
        f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{post_text}",
        reply_markup=get_post_actions_keyboard()
    )
    await callback.answer()

@router.message(StateFilter(PostCreationStates.enter_time))
async def process_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    from utils.timezone_utils import parse_time_input
    
    time_text = message.text.strip()
    
    try:
        scheduled_at = parse_time_input(time_text)
        
        if not scheduled_at:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ <code>15:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
                "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ 15:30</code> - –∑–∞–≤—Ç—Ä–∞ –≤ 15:30\n"
                "‚Ä¢ <code>25.12.2024 15:30</code> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_schedule")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.update_data(scheduled_at=scheduled_at)
        await state.set_state(PostCreationStates.confirm)
        
        data = await state.get_data()
        post_text = data.get('post_text', '')
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {format_datetime(scheduled_at)}\n"
            f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {len(data.get('selected_tags', []))} –≤—ã–±—Ä–∞–Ω–æ\n"
            f"üìö <b>–°–µ—Ä–∏—è:</b> {'–î–∞' if data.get('series_id') else '–ù–µ—Ç'}",
            reply_markup=get_confirmation_keyboard("publish")
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{time_text}': {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ <code>15:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n"
            "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ 15:30</code> - –∑–∞–≤—Ç—Ä–∞ –≤ 15:30\n"
            "‚Ä¢ <code>25.12.2024 15:30</code> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_schedule")]
            ])
        )

@router.callback_query(F.data == "confirm_publish", StateFilter(PostCreationStates.confirm))
async def callback_confirm_publish(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    logger.info("=== –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê ===")
    
    data = await state.get_data()
    logger.info(f"üìä FSM –¥–∞–Ω–Ω—ã–µ: {data}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        post_text = data.get('post_text', '')
        selected_tags = data.get('selected_tags', [])
        series_id = data.get('series_id')
        scheduled_at = data.get('scheduled_at')
        
        logger.info(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: '{post_text}'")
        logger.info(f"üè∑Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {selected_tags}")
        logger.info(f"üìö ID —Å–µ—Ä–∏–∏: {series_id}")
        logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {scheduled_at}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config import config
        channel_ids = getattr(config, 'CHANNEL_IDS', [])
        logger.info(f"üì¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {channel_ids}")
        
        if not channel_ids:
            await callback.message.edit_text(
                "‚ùå <b>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –ë–î
        logger.info("üíæ –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        post_id = await post_service.create_post(
            tg_channel_id=channel_ids[0],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
            title=None,  # –ü–æ–∫–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            body_md=post_text,
            user_id=callback.from_user.id,
            series_id=series_id,
            scheduled_at=scheduled_at,
            tag_ids=selected_tags
        )
        logger.info(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {post_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        result_text = f"‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        result_text += f"üìù <b>ID –ø–æ—Å—Ç–∞:</b> {post_id}\n"
        result_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {post_text[:100]}{'...' if len(post_text) > 100 else ''}\n"
        
        if series_id:
            result_text += f"üìö <b>–°–µ—Ä–∏—è:</b> {series_id}\n"
        
        if selected_tags:
            result_text += f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {len(selected_tags)} —à—Ç.\n"
        
        if scheduled_at:
            result_text += f"üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞:</b> {format_datetime(scheduled_at)}\n"
        else:
            result_text += f"üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ß–µ—Ä–Ω–æ–≤–∏–∫\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="my_posts")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: %s", e)
        logger.error("üìä –î–∞–Ω–Ω—ã–µ FSM –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏: %s", data)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    await callback.answer()

@router.callback_query(F.data == "my_posts")
async def callback_my_posts(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        posts = await post_service.get_user_posts(callback.from_user.id, limit=10)
        
        if not posts:
            await callback.message.edit_text(
                "üìã <b>–ú–æ–∏ –ø–æ—Å—Ç—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /new_post",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        text = "üìã <b>–ú–æ–∏ –ø–æ—Å—Ç—ã</b>\n\n"
        
        for i, post in enumerate(posts, 1):
            status_emoji = {
                'draft': 'üìù',
                'scheduled': '‚è∞',
                'published': '‚úÖ',
                'deleted': '‚ùå'
            }.get(post['status'], '‚ùì')
            
            text += f"{i}. {status_emoji} <b>#{post['id']}</b>\n"
            text += f"   üìù {post['body_md'][:50]}{'...' if len(post['body_md']) > 50 else ''}\n"
            
            if post['series_title']:
                text += f"   üìö {post['series_title']}\n"
            
            if post['tags_cache']:
                tags = ', '.join(post['tags_cache'][:3])
                text += f"   üè∑Ô∏è {tags}\n"
            
            if post['scheduled_at']:
                text += f"   ‚è∞ {format_datetime(post['scheduled_at'])}\n"
            
            text += f"   üìÖ {format_datetime(post['created_at'])}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        if len(posts) >= 10:
            keyboard.append([InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="load_more_posts")])
        keyboard.append([InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in callback_my_posts: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤</b>\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")]
            ])
        )
        await callback.answer()

@router.callback_query(F.data == "load_more_posts")
async def callback_load_more_posts(callback: CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        logger.info(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º offset –∏–∑ FSM –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 10 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        data = await callback.message.get_state()
        offset = 10  # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        posts = await post_service.get_user_posts(callback.from_user.id, limit=10, offset=offset)
        
        if not posts:
            await callback.answer("üì≠ –ë–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        text = "üìã <b>–ú–æ–∏ –ø–æ—Å—Ç—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)</b>\n\n"
        
        for i, post in enumerate(posts, offset + 1):
            status_emoji = {
                'draft': 'üìù',
                'scheduled': '‚è∞',
                'published': '‚úÖ',
                'deleted': '‚ùå'
            }.get(post['status'], '‚ùì')
            
            text += f"{i}. {status_emoji} <b>#{post['id']}</b>\n"
            text += f"   üìù {post['body_md'][:50]}{'...' if len(post['body_md']) > 50 else ''}\n"
            
            if post['series_title']:
                text += f"   üìö {post['series_title']}\n"
            
            if post['tags_cache']:
                tags = ', '.join(post['tags_cache'][:3])
                text += f"   üè∑Ô∏è {tags}\n"
            
            if post['scheduled_at']:
                text += f"   ‚è∞ {format_datetime(post['scheduled_at'])}\n"
            
            text += f"   üìÖ {format_datetime(post['created_at'])}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        if len(posts) >= 10:
            keyboard.append([InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="load_more_posts")])
        keyboard.append([InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in callback_load_more_posts: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤", show_alert=True)

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="my_posts")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "cancel_publish", StateFilter(PostCreationStates.confirm))
async def callback_cancel_publish(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_post –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞."
    )
    await callback.answer()

@router.callback_query(F.data == "post_advanced")
async def callback_post_advanced(callback: CallbackQuery, state: FSMContext):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—Ç–æ–º"""
    from utils.keyboards import get_post_advanced_keyboard
    
    try:
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_post_advanced_keyboard()
        )
    except Exception as e:
        logger.warning("Failed to edit message in post_advanced: %s", e)
    await callback.answer()

@router.callback_query(F.data == "back_to_post")
async def callback_back_to_post(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ—Å—Ç–∞"""
    from utils.keyboards import get_post_actions_keyboard
    
    try:
        await callback.message.edit_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.\n"
            "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥` –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.",
            reply_markup=get_post_actions_keyboard()
        )
    except Exception as e:
        logger.warning("Failed to edit message in back_to_post: %s", e)
    await callback.answer()

@router.callback_query(F.data == "publish_post", StateFilter(PostCreationStates.preview))
async def callback_publish_post(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    logger.info("=== –ù–ê–ß–ê–õ–û –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ü–û–°–¢–ê ===")
    
    data = await state.get_data()
    post_text = data.get('post_text', '')
    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: '{post_text}'")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config import config
        channel_ids = getattr(config, 'CHANNEL_IDS', [])
        logger.info(f"üì¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {channel_ids}")
        
        if not channel_ids:
            logger.warning("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            await callback.message.edit_text(
                "‚ùå <b>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
                "2. –ù–∞–∂–º–∏—Ç–µ 'üîó –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞'\n"
                "3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
            await callback.answer()
            return
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        published_channels = []
        failed_channels = []
        
        for channel_id in channel_ids:
            try:
                logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª {channel_id}")
                logger.info(f"üìù –¢–µ–∫—Å—Ç: '{post_text}'")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –µ—Å—Ç—å
                sent_message = await callback.bot.send_message(
                    chat_id=channel_id,
                    text=post_text
                )

                
                published_channels.append(channel_id)
                logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
                logger.info(f"üì® ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.message_id}")
                
            except Exception as e:
                failed_channels.append((channel_id, str(e)))
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if published_channels:
            result_text = f"‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
            result_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
            result_text += f"üì¢ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ã:</b> {len(published_channels)}\n"
            
            if failed_channels:
                result_text += f"‚ùå <b>–û—à–∏–±–∫–∏:</b> {len(failed_channels)} –∫–∞–Ω–∞–ª–æ–≤\n"
        else:
            result_text = "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç</b>\n\n"
            result_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post_text}\n\n"
            result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö."
        
        await callback.message.edit_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç –≤ –ë–î
        # post_id = await post_service.create_post(...)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error("Failed to publish post: %s", e)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data == "cancel_post")
async def callback_cancel_post(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await state.clear()
    try:
        await callback.message.edit_text(
            "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
    except Exception as e:
        logger.warning("Failed to edit message in cancel_post: %s", e)
    await callback.answer()

@router.message(Command("my_posts"), admin_filter)
async def cmd_my_posts(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        posts = await post_service.get_user_posts(message.from_user.id, limit=10)
        
        if not posts:
            await message.answer(
                "üìã <b>–ú–æ–∏ –ø–æ—Å—Ç—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /new_post",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        text = "üìã <b>–ú–æ–∏ –ø–æ—Å—Ç—ã</b>\n\n"
        
        for i, post in enumerate(posts, 1):
            status_emoji = {
                'draft': 'üìù',
                'scheduled': '‚è∞',
                'published': '‚úÖ',
                'deleted': '‚ùå'
            }.get(post['status'], '‚ùì')
            
            text += f"{i}. {status_emoji} <b>#{post['id']}</b>\n"
            text += f"   üìù {post['body_md'][:50]}{'...' if len(post['body_md']) > 50 else ''}\n"
            
            if post['series_title']:
                text += f"   üìö {post['series_title']}\n"
            
            if post['tags_cache']:
                tags = ', '.join(post['tags_cache'][:3])
                text += f"   üè∑Ô∏è {tags}\n"
            
            if post['scheduled_at']:
                text += f"   ‚è∞ {format_datetime(post['scheduled_at'])}\n"
            
            text += f"   üìÖ {format_datetime(post['created_at'])}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        if len(posts) >= 10:
            keyboard.append([InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="load_more_posts")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")])
        
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ <b>CtrlBot - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/new_post - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
/my_posts - –ú–æ–∏ –ø–æ—Å—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
/config - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

<b>Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
*–∂–∏—Ä–Ω—ã–π* - –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
_–∫—É—Ä—Å–∏–≤_ - –∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç
`–∫–æ–¥` - –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥
```–±–ª–æ–∫ –∫–æ–¥–∞``` - –±–ª–æ–∫ –∫–æ–¥–∞
[—Å—Å—ã–ª–∫–∞](url) - —Å—Å—ã–ª–∫–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await message.answer(
        help_text, 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(StateFilter(PostCreationStates.enter_text))
async def process_any_post_message(message: Message, state: FSMContext):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ - –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    logger.info("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        text = message.text.strip()
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{text}'")
        logger.info(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    elif message.caption:
        text = message.caption.strip()
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω caption: '{text}'")
        logger.info(f"üìè –î–ª–∏–Ω–∞ caption: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
        await message.answer("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç</b>\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞")
    is_valid, error_msg = await post_service.validate_post_text(text)
    if not is_valid:
        logger.warning(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {error_msg}")
        await message.answer(f"‚ùå {error_msg}")
        return
    logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ FSM state")
    await state.update_data(post_text=text)
    await state.set_state(PostCreationStates.preview)
    logger.info("‚úÖ FSM state –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    logger.info("üëÅÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    await message.answer(
        f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n{text}",
        reply_markup=get_post_actions_keyboard()
    )
    logger.info("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    logger.info("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===")

@router.message()
async def handle_unknown(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )
