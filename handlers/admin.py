"""
@file: handlers/admin.py
@description: –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
@dependencies: services/tags.py, utils/keyboards.py, utils/filters.py
@created: 2025-09-13
"""

import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from utils.filters import IsConfigAdminFilter
from utils.logging import get_logger
from config import config

logger = get_logger(__name__)
router = Router()

# –§–∏–ª—å—Ç—Ä—ã
admin_filter = IsConfigAdminFilter()

async def safe_callback_answer(callback: CallbackQuery, text: str = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await callback.answer(text=text)
    except TelegramBadRequest as e:
        if "query is too old" in str(e) or "response timeout expired" in str(e):
            logger.warning("Callback query expired, ignoring: %s", e)
        else:
            logger.warning("Failed to answer callback: %s", e)
    except Exception as e:
        logger.warning("Unexpected error answering callback: %s", e)

@router.message(Command("start"), admin_filter)
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    logger.info("Start command received from user %s", message.from_user.id)
    logger.info("Admin access granted for user %s", message.from_user.id)
    
    await message.answer(
        "üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å CtrlAI\\_Bot*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="my_posts")],
            [InlineKeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ", callback_data="check_scheduled_posts")],
            [InlineKeyboardButton(text="ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_functions")],
            [InlineKeyboardButton(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data="manage_tags")],
            [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏", callback_data="manage_series")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="manage_reminders")],
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="channel_settings")],
            [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞", callback_data="get_channel_id")]
        ])
    )

@router.message(Command("admin"), admin_filter)
async def cmd_admin(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await message.answer(
        "üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å CtrlAI\\_Bot*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
            [InlineKeyboardButton(text="üìä –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="my_posts")],
            [InlineKeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ", callback_data="check_scheduled_posts")],
            [InlineKeyboardButton(text="ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_functions")],
            [InlineKeyboardButton(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data="manage_tags")],
            [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏", callback_data="manage_series")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="manage_reminders")],
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="channel_settings")],
            [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞", callback_data="get_channel_id")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    await message.answer("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@router.message(F.text == "üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç", admin_filter)
async def btn_new_post(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π –ø–æ—Å—Ç' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown\\.\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥` –∏ –¥—Ä—É–≥–∏–µ\n"
        "—ç–ª–µ–º–µ–Ω—Ç—ã.\n\n"
        "üëáüëáüëá\n"
        "*–í –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç*\n"
        "\\(–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ Ctrl\\+C –∏ Ctrl\\+V –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\\)"
    )

@router.message(F.text == "ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫")
async def btn_ai_helper(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'AI –ø–æ–º–æ—â–Ω–∏–∫' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "ü§ñ *AI –ø–æ–º–æ—â–Ω–∏–∫*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ AI —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="ai_functions")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(F.text == "üè∑Ô∏è –¢–µ–≥–∏")
async def btn_tags(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–µ–≥–∏' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data="manage_tags")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def btn_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="channel_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(F.text == "üìã –ú–æ–∏ –ø–æ—Å—Ç—ã")
async def btn_my_posts(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –ø–æ—Å—Ç—ã' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "üìã *–ú–æ–∏ –ø–æ—Å—Ç—ã*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤", callback_data="my_posts")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def btn_reminders(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏", callback_data="manage_reminders")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(F.text == "üìä –°–µ—Ä–∏–∏")
async def btn_series(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–µ—Ä–∏–∏' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "üìä *–°–µ—Ä–∏–∏*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏", callback_data="manage_series")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_statistics(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ inline –º–µ–Ω—é"""
    await message.answer(
        "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(Command("add_channel"), admin_filter)
async def cmd_add_channel_private(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type != 'private':
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    await message.answer(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –∫–∞–Ω–∞–ª–µ\n"
        "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel –≤ –∫–∞–Ω–∞–ª–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
    )

@router.message(Command("add_channel"))
async def cmd_add_channel_in_channel(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ
    if not message.chat.type in ['channel', 'supergroup']:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
    try:
        user_status = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        if user_status.status not in ['administrator', 'creator']:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É!")
            return
    except Exception as e:
        logger.error("Error checking user status: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    channel_id = message.chat.id
    channel_title = message.chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        bot_member = await message.bot.get_chat_member(channel_id, message.bot.id)
        
        if bot_member.status in ['administrator', 'creator']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            if bot_member.can_post_messages:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                from database import db
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª
                existing_channel = await db.fetch_one(
                    "SELECT id FROM channels WHERE tg_channel_id = $1", 
                    channel_id
                )
                
                if existing_channel:
                    await message.answer(
                        f"‚ÑπÔ∏è *–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω*\n\n"
                        f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                        f"üÜî *ID:* `{channel_id}`\n\n"
                        f"–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                        ])
                    )
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                    await db.execute(
                        """
                        INSERT INTO channels (tg_channel_id, title, enabled, created_at)
                        VALUES ($1, $2, true, NOW())
                        """,
                        channel_id, channel_title
                    )
                    
                    await message.answer(
                        f"‚úÖ *–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                        f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                        f"üÜî *ID:* `{channel_id}`\n"
                        f"ü§ñ *–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:* ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                        f"üìù *–ü—É–±–ª–∏–∫–∞—Ü–∏—è:* ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∞\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                        ])
                    )
            else:
                await message.answer(
                    f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤*\n\n"
                    f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                    f"üÜî *ID:* `{channel_id}`\n\n"
                    f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                    ])
                )
        else:
            await message.answer(
                f"‚ùå *–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n"
                f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                f"üÜî *ID:* `{channel_id}`\n\n"
                f"–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
            
    except Exception as e:
        logger.error("Error adding channel: %s", e)
        await message.answer(
            f"‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞*\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )

@router.message(Command("help"))
async def cmd_help_in_channel(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ
    if not message.chat.type in ['channel', 'supergroup']:
        return  # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    help_text = """
ü§ñ *CtrlBot - –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:*
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel

*–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:*
‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞.
    """
    
    await message.answer(help_text)

@router.message(Command("start"))
async def cmd_start_in_channel(message: Message):
    """–°—Ç–∞—Ä—Ç (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ
    if not message.chat.type in ['channel', 'supergroup']:
        return  # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    
    await message.answer(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CtrlBot!*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∫–∞–Ω–∞–ª–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ (–∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç)
@router.message(lambda message: message.chat.type in ['channel', 'supergroup'] and message.text)
async def handle_channel_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
    try:
        user_status = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        if user_status.status not in ['administrator', 'creator']:
            return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    except Exception as e:
        logger.error("Error checking user status: %s", e)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if text == "/start":
        await cmd_start_in_channel(message)
    elif text == "/help":
        await cmd_help_in_channel(message)
    elif text == "/add_channel":
        await cmd_add_channel_in_channel(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥–∏—Ç—å @botname)
@router.inline_query()
async def handle_inline_query(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ –∫–∞–Ω–∞–ª–µ"""
    query = inline_query.query.strip()
    
    # –í inline-–∑–∞–ø—Ä–æ—Å–∞—Ö –Ω–µ—Ç chat, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±—É–¥–µ—Ç –≤ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    
    results = []
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if query == "" or "add" in query.lower() or "–∫–∞–Ω–∞–ª" in query.lower():
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        results.append(InlineQueryResultArticle(
            id="add_channel",
            title="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É",
            description="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É CtrlBot",
            input_message_content=InputTextMessageContent(
                message_text="‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*\n\n"
                           "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É CtrlAI\\_Bot:\n\n"
                           "1\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/add_channel` –≤ –∫–∞–Ω–∞–ª–µ\n"
                           "2\\. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º\n"
                           "3\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
                           "**–ö–æ–º–∞–Ω–¥—ã –≤ –∫–∞–Ω–∞–ª–µ:**\n"
                           "‚Ä¢ `/add_channel` \\- –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
                           "‚Ä¢ `/help` \\- —Å–ø—Ä–∞–≤–∫–∞\n"
                           "‚Ä¢ `/start` \\- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                parse_mode="Markdown"
            )
        ))
    
    if query == "" or "help" in query.lower() or "—Å–ø—Ä–∞–≤–∫–∞" in query.lower():
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        results.append(InlineQueryResultArticle(
            id="help",
            title="‚ùì –°–ø—Ä–∞–≤–∫–∞ CtrlAI\\_Bot",
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞",
            input_message_content=InputTextMessageContent(
                message_text="ü§ñ *CtrlAI\\_Bot \\- –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞*\n\n"
                           "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∫–∞–Ω–∞–ª–∞\\.\n\n"
                           "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                           "‚Ä¢ @CtrlAI\\_Bot add\\_channel \\- –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É\n"
                           "‚Ä¢ @CtrlAI\\_Bot help \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
                           "**–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º\\.",
                parse_mode="Markdown"
            )
        ))
    
    if query == "" or "admin" in query.lower() or "–ø–∞–Ω–µ–ª—å" in query.lower():
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        results.append(InlineQueryResultArticle(
            id="admin_panel",
            title="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å CtrlAI\\_Bot",
            description="–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º",
            input_message_content=InputTextMessageContent(
                message_text="üëë *–ê–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å CtrlAI\\_Bot*\n\n"
                           "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º:",
                parse_mode="Markdown"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏", callback_data="manage_posts")],
                [InlineKeyboardButton(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data="manage_tags")],
                [InlineKeyboardButton(text="üì∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="channel_settings")],
                [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton(text="ü§ñ AI —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="ai_functions")],
                [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="manage_reminders")]
            ])
        ))
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
    if not results:
        results.append(InlineQueryResultArticle(
            id="placeholder",
            title="ü§ñ CtrlAI\\_Bot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏",
            description="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º",
            input_message_content=InputTextMessageContent(
                message_text="ü§ñ *CtrlAI\\_Bot \\- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏*\n\n"
                           "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                           "‚Ä¢ `add\\_channel` \\- –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É\n"
                           "‚Ä¢ `help` \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
                           "‚Ä¢ `admin` \\- –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å\n\n"
                           "**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
                           "‚Ä¢ @CtrlAI\\_Bot add\\_channel\n"
                           "‚Ä¢ @CtrlAI\\_Bot help\n"
                           "‚Ä¢ @CtrlAI\\_Bot admin",
                parse_mode="Markdown"
            )
        ))
    
    await inline_query.answer(results, cache_time=0)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫ –∏–∑ inline-—Ä–µ–∂–∏–º–∞
@router.callback_query(F.data == "add_channel_inline")
async def callback_add_channel_inline(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É"""
    # –í inline-—Ä–µ–∂–∏–º–µ callback.message –º–æ–∂–µ—Ç –±—ã—Ç—å None
    if not callback.message:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel –≤ –∫–∞–Ω–∞–ª–µ.")
        return
    
    # –í inline-—Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ-–¥—Ä—É–≥–æ–º—É
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ callback
        chat_id = callback.message.chat.id
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
        user_status = await callback.bot.get_chat_member(chat_id, user_id)
        if user_status.status not in ['administrator', 'creator']:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É!")
            return
    except Exception as e:
        logger.error("Error checking user status: %s", e)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å API, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
        pass
    
    channel_id = callback.message.chat.id
    channel_title = callback.message.chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    
    logger.info(f"Adding channel: {channel_title} (ID: {channel_id})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ
        existing_channel = await db.fetch_one(
            "SELECT id FROM channels WHERE tg_channel_id = $1",
            channel_id
        )
        
        if existing_channel:
            logger.info(f"Channel {channel_id} already exists")
            await callback.answer("‚úÖ –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.execute(
            "INSERT INTO channels (tg_channel_id, title, enabled, created_at) VALUES ($1, $2, $3, $4)",
            channel_id, channel_title, True, datetime.now()
        )
        
        logger.info(f"Channel {channel_id} added successfully")
        
        await callback.answer(
            f"‚úÖ *–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É!*\n\n"
            f"üì∫ **{channel_title}**\n"
            f"üÜî ID: `{channel_id}`\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            show_alert=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ *–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É!*\n\n"
            f"üì∫ **{channel_title}**\n"
            f"üÜî ID: `{channel_id}`\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
        
    except Exception as e:
        logger.error("Error adding channel: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("config"), admin_filter)
async def cmd_config(message: Message):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_info = f"""
‚öôÔ∏è *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CtrlBot*

*–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {config.LOG_LEVEL}
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {config.MAX_POST_LENGTH}
‚Ä¢ –ú–∏–Ω. —Ç–µ–≥–æ–≤: {config.MIN_TAGS_REQUIRED}
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {config.TIMEZONE}

*–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ –•–æ—Å—Ç: {config.DB_HOST}:{config.DB_PORT}
‚Ä¢ –ë–∞–∑–∞: {config.DB_NAME}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config.DB_USER}

*AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:*
‚Ä¢ YandexGPT: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' if config.YANDEX_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
‚Ä¢ –ü–∞–ø–∫–∞: {config.YANDEX_FOLDER_ID or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

*–ö–∞–Ω–∞–ª—ã:*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(config.CHANNEL_IDS) if hasattr(config, 'CHANNEL_IDS') else 0}
‚Ä¢ ID –∫–∞–Ω–∞–ª–æ–≤: {config.CHANNEL_IDS if hasattr(config, 'CHANNEL_IDS') else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}

*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(config.ADMIN_IDS)}
‚Ä¢ –í–∞—à ID: {message.from_user.id if message.from_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
    """
    
    await message.answer(config_info)

@router.message(F.forward_from_chat, admin_filter)
async def handle_forwarded_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞"""
    if message.forward_from_chat and message.forward_from_chat.type in ['channel', 'supergroup']:
        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            bot_member = await message.bot.get_chat_member(channel_id, message.bot.id)
            
            if bot_member.status in ['administrator', 'creator']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                can_post = bot_member.can_post_messages if hasattr(bot_member, 'can_post_messages') else True
                
                if can_post:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    if not hasattr(config, 'CHANNEL_IDS'):
                        config.CHANNEL_IDS = []
                    
                    if channel_id not in config.CHANNEL_IDS:
                        config.CHANNEL_IDS.append(channel_id)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª
                        await save_channel_id_to_env(channel_id)
                        
                        await message.answer(
                            f"‚úÖ *–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*\n\n"
                            f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                            f"üÜî *ID:* `{channel_id}`\n"
                            f"ü§ñ *–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:* ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                            f"üìù *–ü—É–±–ª–∏–∫–∞—Ü–∏—è:* ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∞\n\n"
                            f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                            ])
                        )
                    else:
                        await message.answer(
                            f"‚ÑπÔ∏è *–ö–∞–Ω–∞–ª —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                            f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                            f"üÜî *ID:* `{channel_id}`\n\n"
                            f"–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                            ])
                        )
                else:
                    await message.answer(
                        f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤*\n\n"
                        f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                        f"üÜî *ID:* `{channel_id}`\n\n"
                        f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                        ])
                    )
            else:
                await message.answer(
                    f"‚ùå *–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n"
                    f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                    f"üÜî *ID:* `{channel_id}`\n\n"
                    f"–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                    ])
                )
                
        except Exception as e:
            logger.error("Error checking channel permissions: %s", e)
            await message.answer(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞*\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )

async def save_channel_id_to_env(channel_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ –≤ .env —Ñ–∞–π–ª"""
    try:
        env_file = ".env"
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
        env_content = ""
        if os.path.exists(env_file):
            with open(env_file, 'r', encoding='utf-8') as f:
                env_content = f.read()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º CHANNEL_IDS
        if "CHANNEL_IDS=" in env_content:
            # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            import re
            pattern = r"CHANNEL_IDS=.*"
            replacement = f"CHANNEL_IDS={channel_id}"
            env_content = re.sub(pattern, replacement, env_content)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            env_content += f"\nCHANNEL_IDS={channel_id}\n"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
            
        logger.info("Channel ID %s saved to .env file", channel_id)
        
    except Exception as e:
        logger.error("Failed to save channel ID to .env: %s", e)

@router.callback_query(F.data == "channel_settings", admin_filter)
async def callback_channel_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
        channels_query = """
            SELECT 
                c.*,
                COUNT(p.id) as posts_count,
                COUNT(CASE WHEN p.status = 'published' THEN 1 END) as published_count,
                COUNT(CASE WHEN p.status = 'scheduled' THEN 1 END) as scheduled_count,
                COUNT(CASE WHEN p.status = 'draft' THEN 1 END) as draft_count,
                COUNT(CASE WHEN p.status = 'deleted' THEN 1 END) as deleted_count,
                COUNT(CASE WHEN p.media_type IS NOT NULL THEN 1 END) as media_posts_count,
                COUNT(CASE WHEN p.scheduled_at IS NOT NULL THEN 1 END) as scheduled_posts_count,
                MAX(p.created_at) as last_post_date,
                MIN(p.created_at) as first_post_date
            FROM channels c
            LEFT JOIN posts p ON c.id = p.channel_id
            GROUP BY c.id, c.title, c.tg_channel_id, c.created_at
            ORDER BY c.title ASC
        """
        channels = await db.fetch_all(channels_query)
        
        if not channels:
            text = "üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞*\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        else:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_posts = sum(ch['posts_count'] for ch in channels)
            total_published = sum(ch['published_count'] for ch in channels)
            total_scheduled = sum(ch['scheduled_count'] for ch in channels)
            total_drafts = sum(ch['draft_count'] for ch in channels)
            active_channels = len(channels)  # –í—Å–µ –∫–∞–Ω–∞–ª—ã —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏
            
            text = "üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞*\n\n"
            text += f"üìä \\*\\*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\:\\*\\*\n"
            text += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)} \\(–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_channels}\\)\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
            text += f"‚Ä¢ ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {total_published}\n"
            text += f"‚Ä¢ ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_scheduled}\n"
            text += f"‚Ä¢ üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {total_drafts}\n\n"
            text += f"üì∫ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:*\n\n"
            
            for i, channel in enumerate(channels[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
                channel_title = channel['title'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                status_icon = "‚úÖ"  # –í—Å–µ –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã
                
                text += f"**{i}\\. {status_icon} {channel_title}**\n"
                text += f"‚Ä¢ ID: `{channel['tg_channel_id']}`\n"
                text += f"‚Ä¢ \\*\\*–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤\\:\\*\\* {channel['posts_count']}\n"
                text += f"  \\- ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {channel['published_count']}\n"
                text += f"  \\- ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {channel['scheduled_count']}\n"
                text += f"  \\- üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {channel['draft_count']}\n"
                text += f"  \\- üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ: {channel['deleted_count']}\n"
                
                if channel['media_posts_count'] > 0:
                    text += f"  \\- üìé –° –º–µ–¥–∏–∞: {channel['media_posts_count']}\n"
                
                if channel['last_post_date']:
                    from datetime import datetime
                    last_post = channel['last_post_date']
                    if isinstance(last_post, str):
                        last_post = datetime.fromisoformat(last_post.replace('Z', '+00:00'))
                    last_post_str = last_post.strftime('%d.%m.%Y %H:%M').replace('.', '\\.')
                    text += f"‚Ä¢ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç:** {last_post_str}\n"
                
                text += "\n"
            
            if len(channels) > 5:
                text += f"... –∏ –µ—â–µ {len(channels) - 5} –∫–∞–Ω–∞–ª–æ–≤\n\n"
        
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", callback_data="channel_stats")],
            [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error("Error in callback_channel_settings: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )

@router.callback_query(F.data == "manage_channels", admin_filter)
async def callback_manage_channels(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
    try:
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        channels_query = """
            SELECT 
                c.*,
                COUNT(p.id) as posts_count,
                COUNT(CASE WHEN p.status = 'published' THEN 1 END) as published_count
            FROM channels c
            LEFT JOIN posts p ON c.id = p.channel_id
            GROUP BY c.id, c.title, c.tg_channel_id, c.created_at
            ORDER BY c.title ASC
        """
        channels = await db.fetch_all(channels_query)
        
        if not channels:
            text = "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏*\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
            keyboard = [
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_settings")]
            ]
        else:
            text = "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏*\n\n"
            text += f"üì∫ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:*\n\n"
            
            keyboard = []
            for i, channel in enumerate(channels[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
                channel_title = channel['title'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                status_icon = "‚úÖ"  # –í—Å–µ –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã
                status_text = "–ê–∫—Ç–∏–≤–µ–Ω"  # –í—Å–µ –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã
                
                text += f"**{i}\\. {status_icon} {channel_title}**\n"
                text += f"‚Ä¢ ID: `{channel['tg_channel_id']}`\n"
                text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_text}\n"
                text += f"‚Ä¢ –ü–æ—Å—Ç–æ–≤: {channel['posts_count']} \\(–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {channel['published_count']}\\)\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                if i <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –∫–∞–Ω–∞–ª–æ–≤
                    channel_buttons = [
                        InlineKeyboardButton(
                            text=f"üìù {channel_title[:15]}{'...' if len(channel_title) > 15 else ''}", 
                            callback_data=f"channel_detail_{channel['id']}"
                        )
                    ]
                    if i % 2 == 1:  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                        keyboard.append(channel_buttons)
                    else:
                        keyboard[-1].extend(channel_buttons)
            
            if len(channels) > 10:
                text += f"... –∏ –µ—â–µ {len(channels) - 10} –∫–∞–Ω–∞–ª–æ–≤\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
            keyboard.extend([
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="channel_stats")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_settings")]
            ])
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error("Error in callback_manage_channels: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_settings")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    
    await callback.answer()

@router.callback_query(F.data.startswith("channel_detail_"), admin_filter)
async def callback_channel_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        from database import db
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ callback_data
        channel_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_query = """
            SELECT 
                c.*,
                COUNT(p.id) as posts_count,
                COUNT(CASE WHEN p.status = 'published' THEN 1 END) as published_count,
                COUNT(CASE WHEN p.status = 'scheduled' THEN 1 END) as scheduled_count,
                COUNT(CASE WHEN p.status = 'draft' THEN 1 END) as draft_count,
                COUNT(CASE WHEN p.status = 'deleted' THEN 1 END) as deleted_count,
                COUNT(CASE WHEN p.media_type IS NOT NULL THEN 1 END) as media_posts_count,
                MAX(p.created_at) as last_post_date,
                MIN(p.created_at) as first_post_date
            FROM channels c
            LEFT JOIN posts p ON c.id = p.channel_id
            WHERE c.id = $1
            GROUP BY c.id, c.title, c.tg_channel_id, c.created_at
        """
        channel = await db.fetch_one(channel_query, channel_id)
        
        if not channel:
            text = "‚ùå *–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*"
            keyboard = [
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")]
            ]
        else:
            channel_title = channel['title'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            status_icon = "‚úÖ"  # –í—Å–µ –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã
            status_text = "–ê–∫—Ç–∏–≤–µ–Ω"  # –í—Å–µ –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã
            
            text = f"üì∫ *{status_icon} {channel_title}*\n\n"
            text += f"\\*\\*–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\\:\\*\\*\n"
            text += f"‚Ä¢ ID: `{channel['tg_channel_id']}`\n"
            text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_text}\n"
            created_str = channel['created_at'].strftime('%d.%m.%Y %H:%M').replace('.', '\\.') if channel['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {created_str}\n\n"
            
            text += f"\\*\\*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤\\:\\*\\*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ: {channel['posts_count']}\n"
            text += f"‚Ä¢ ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {channel['published_count']}\n"
            text += f"‚Ä¢ ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {channel['scheduled_count']}\n"
            text += f"‚Ä¢ üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {channel['draft_count']}\n"
            text += f"‚Ä¢ üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ: {channel['deleted_count']}\n"
            
            if channel['media_posts_count'] > 0:
                text += f"‚Ä¢ üìé –° –º–µ–¥–∏–∞: {channel['media_posts_count']}\n"
            
            if channel['last_post_date']:
                from datetime import datetime
                last_post = channel['last_post_date']
                if isinstance(last_post, str):
                    last_post = datetime.fromisoformat(last_post.replace('Z', '+00:00'))
                text += f"\n\\*\\*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\\:\\*\\*\n"
                last_post_str = last_post.strftime('%d.%m.%Y %H:%M').replace('.', '\\.')
                text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_str}\n"
            
            if channel['first_post_date']:
                first_post = channel['first_post_date']
                if isinstance(first_post, str):
                    first_post = datetime.fromisoformat(first_post.replace('Z', '+00:00'))
                first_post_str = first_post.strftime('%d.%m.%Y %H:%M').replace('.', '\\.')
                text += f"‚Ä¢ –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç: {first_post_str}\n"
            
            keyboard = [
                [InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞", callback_data=f"channel_posts_{channel_id}")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"channel_config_{channel_id}")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"channel_stats_{channel_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")]
            ]
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error("Error in callback_channel_detail: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_channels")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )

@router.callback_query(F.data == "manage_tags", admin_filter)
async def callback_manage_tags(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏"""
    try:
        from services.tags import tag_service
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channels_query = "SELECT * FROM channels ORDER BY title ASC"
        channels = await db.fetch_all(channels_query)
        
        if not channels:
            text = "üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏*\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel = channels[0]
            tags = await tag_service.get_tags_by_channel(channel['id'])
            
            text = f"üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏*\n\n"
            text += f"üì∫ *–ö–∞–Ω–∞–ª:* {channel['title']}\n\n"
            
            if tags:
                text += "üìã *–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:*\n"
                for tag in tags[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–µ–≥–æ–≤
                    text += f"‚Ä¢ `{tag['name']}` ({tag['kind']})\n"
                if len(tags) > 10:
                    text += f"... –∏ –µ—â–µ {len(tags) - 10} —Ç–µ–≥–æ–≤\n"
            else:
                text += "üìù –¢–µ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥", callback_data="create_tag")],
            [InlineKeyboardButton(text="üìã –í—Å–µ —Ç–µ–≥–∏", callback_data="list_tags")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error("Error in callback_manage_tags: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    
    await callback.answer()

@router.callback_query(F.data == "manage_series", admin_filter)
async def callback_manage_series(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏"""
    try:
        from services.series import series_service
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channels_query = "SELECT * FROM channels ORDER BY title ASC"
        channels = await db.fetch_all(channels_query)
        
        if not channels:
            text = "üìö *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏*\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel = channels[0]
            series = await series_service.get_series_by_channel(channel['id'])
            
            text = f"üìö *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏*\n\n"
            text += f"üì∫ *–ö–∞–Ω–∞–ª:* {channel['title']}\n\n"
            
            if series:
                text += "üìã *–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–∏–∏:*\n"
                for s in series[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–µ—Ä–∏–π
                    text += f"‚Ä¢ `{s['code']}` - {s['title']} (—Å–ª–µ–¥—É—é—â–∏–π: {s['next_number']})\n"
                if len(series) > 10:
                    text += f"... –∏ –µ—â–µ {len(series) - 10} —Å–µ—Ä–∏–π\n"
            else:
                text += "üìù –°–µ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é", callback_data="create_series")],
            [InlineKeyboardButton(text="üìã –í—Å–µ —Å–µ—Ä–∏–∏", callback_data="list_series")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error("Error in callback_manage_series: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–π*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    
    await callback.answer()

@router.callback_query(F.data == "manage_reminders", admin_filter)
async def callback_manage_reminders(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    try:
        if callback.message:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            from services.reminder_service import reminder_service
            status = await reminder_service.get_scheduler_status()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminders = await reminder_service.get_all_reminders()
            
            status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if status else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            reminders_count = len(reminders) if reminders else 0
            
            text = f"‚è∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n\n"
            text += f"üìä *–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:* {status_text}\n"
            text += f"üìù *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:* {reminders_count}\n\n"
            text += f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            text += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n"
            text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
            
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="my_reminders")],
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reminder_settings")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ])
            )
    except Exception as e:
        logger.warning("Failed to edit message in manage_reminders: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ])
            )
    await callback.answer()

@router.callback_query(F.data == "export_data", admin_filter)
async def callback_export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from services.export import export_service
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await export_service.get_export_stats()
        
        text = "üìä *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n"
        text += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}\n"
        text += f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['published_posts']}\n"
        text += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['scheduled_posts']}\n"
        text += f"‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {stats['draft_posts']}\n"
        text += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–µ: {stats['deleted_posts']}\n\n"
        
        if stats['channels']:
            text += "üì∫ *–ö–∞–Ω–∞–ª—ã:*\n"
            for channel in stats['channels'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
                text += f"‚Ä¢ {channel['title']}: {channel['posts_count']} –ø–æ—Å—Ç–æ–≤\n"
            if len(stats['channels']) > 5:
                text += f"... –∏ –µ—â–µ {len(stats['channels']) - 5} –∫–∞–Ω–∞–ª–æ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üìÑ JSON —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_json")],
            [InlineKeyboardButton(text="üìù Markdown —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_markdown")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="export_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error("Error in callback_export_data: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    
    await callback.answer()


@router.callback_query(F.data == "back_to_admin", admin_filter)
async def callback_back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        if callback.message:
            await callback.message.edit_text(
                "üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å CtrlAI\\_Bot*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
                    [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="my_posts")],
                    [InlineKeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ", callback_data="check_scheduled_posts")],
                    [InlineKeyboardButton(text="ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_functions")],
                    [InlineKeyboardButton(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data="manage_tags")],
                    [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏", callback_data="manage_series")],
                    [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="manage_reminders")],
                    [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="channel_settings")],
                    [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞", callback_data="get_channel_id")]
                ])
            )
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        logger.warning("Failed to edit message in back_to_admin: %s", e)
        await safe_callback_answer(callback)

# –ù–æ–≤—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "create_post", admin_filter)
async def callback_create_post(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    from utils.states import PostCreationStates
    from utils.keyboards import get_post_actions_keyboard
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    from database import db
    channels = await db.fetch_all("SELECT id, tg_channel_id, title FROM channels")
    
    if not channels:
        # –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await callback.message.edit_text(
            "üîó *–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–∞–Ω–∞–ª!*\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª:\n\n"
            "1Ô∏è‚É£ *–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
            "   ‚Ä¢ –ü—Ä–∞–≤–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "   ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "2Ô∏è‚É£ *–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É*\n"
            "   ‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é ID –∫–∞–Ω–∞–ª–∞\n"
            "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "3Ô∏è‚É£ *–ì–æ—Ç–æ–≤–æ!* –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n\n"
            "üí° _–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å_",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_post")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
        await callback.answer()
        return
    
    # –ï—Å—Ç—å –∫–∞–Ω–∞–ª—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞
    await state.set_state(PostCreationStates.enter_text)
    try:
        if callback.message:
            await callback.message.edit_text(
                "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.\n"
                "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥` –∏ –¥—Ä—É–≥–∏–µ\n"
                "—ç–ª–µ–º–µ–Ω—Ç—ã.\n\n"
                "üëáüëáüëá\n"
                "**–í –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç**\n"
                "(–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ Ctrl+C –∏ Ctrl+V –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!)"
            )
    except Exception as e:
        logger.warning("Failed to edit message in create_post: %s", e)
    await callback.answer()

@router.callback_query(F.data == "create_poll", admin_filter)
async def callback_create_poll(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
    from utils.states import PollCreationStates
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    from database import db
    channels = await db.fetch_all("SELECT id, tg_channel_id, title FROM channels")
    
    if not channels:
        # –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await callback.message.edit_text(
            "üîó *–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–∞–Ω–∞–ª!*\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª:\n\n"
            "1Ô∏è‚É£ *–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
            "   ‚Ä¢ –ü—Ä–∞–≤–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "   ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "2Ô∏è‚É£ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel –≤ –∫–∞–Ω–∞–ª–µ*\n"
            "   –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã\\!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–ø—Ä–æ—Å–∞
    await state.set_state(PollCreationStates.enter_question)
    try:
        if callback.message:
            await callback.message.edit_text(
                "üìä **–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
                ])
            )
    except Exception as e:
        logger.warning("Failed to edit message in create_poll: %s", e)
    await callback.answer()

@router.callback_query(F.data == "export_json", admin_filter)
async def callback_export_json(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"""
    try:
        from services.export import export_service
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = await export_service.export_posts_to_json()
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        import json
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
            temp_file = f.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import FSInputFile
        document = FSInputFile(temp_file, filename="export.json")
        await callback.message.answer_document(
            document=document,
            caption="üìÑ *JSON —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\\!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file)
        
    except Exception as e:
        logger.error("Error in callback_export_json: %s", e)
        await callback.message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    await callback.answer()

@router.callback_query(F.data == "export_markdown", admin_filter)
async def callback_export_markdown(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown"""
    try:
        from services.export import export_service
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        markdown_content = await export_service.export_posts_to_markdown()
        
        # –°–æ–∑–¥–∞–µ–º Markdown —Ñ–∞–π–ª
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False, encoding='utf-8') as f:
            f.write(markdown_content)
            temp_file = f.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import FSInputFile
        document = FSInputFile(temp_file, filename="export.md")
        await callback.message.answer_document(
            document=document,
            caption="üìù *Markdown —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\\!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file)
        
    except Exception as e:
        logger.error("Error in callback_export_markdown: %s", e)
        await callback.message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Markdown*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    await callback.answer()

@router.callback_query(F.data == "export_stats", admin_filter)
async def callback_export_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        from services.export import export_service
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await export_service.get_export_stats()
        
        text = "üìä *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n"
        text += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}\n"
        text += f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['published_posts']}\n"
        text += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['scheduled_posts']}\n"
        text += f"‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {stats['draft_posts']}\n"
        text += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–µ: {stats['deleted_posts']}\n\n"
        
        if stats['channels']:
            text += "üì∫ *–ö–∞–Ω–∞–ª—ã:*\n"
            for channel in stats['channels'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
                text += f"‚Ä¢ {channel['title']}: {channel['posts_count']} –ø–æ—Å—Ç–æ–≤\n"
            if len(stats['channels']) > 5:
                text += f"... –∏ –µ—â–µ {len(stats['channels']) - 5} –∫–∞–Ω–∞–ª–æ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üìÑ JSON —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_json")],
            [InlineKeyboardButton(text="üìù Markdown —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_markdown")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="export_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        
    except Exception as e:
        logger.error("Error in callback_export_stats: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    
    await callback.answer()

@router.callback_query(F.data == "ai_functions", admin_filter)
async def callback_ai_functions(callback: CallbackQuery):
    """AI —Ñ—É–Ω–∫—Ü–∏–∏"""
    try:
        from services.ai_service import ai_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å AI API
        api_status = await ai_service.check_api_status()
        
        text = "ü§ñ *AI –ø–æ–º–æ—â–Ω–∏–∫ CtrlBot*\n\n"
        
        if api_status['status'] == 'working':
            text += "‚úÖ *–°—Ç–∞—Ç—É—Å:* API —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
            text += "üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            text += "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞\n"
            text += "‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤\n"
            text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞\n"
            text += "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å—Ç–∏–ª—è\n"
            text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π\n\n"
            text += "üí° *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n"
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º, –∏ AI –ø–æ–º–æ–∂–µ—Ç –µ–≥–æ —É–ª—É—á—à–∏—Ç—å\\!"
        elif api_status['status'] == 'not_configured':
            text += "‚ö†Ô∏è *–°—Ç–∞—Ç—É—Å:* API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
            text += "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å YANDEX_API_KEY\n"
            text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å YANDEX_FOLDER_ID\n\n"
            text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        else:
            text += "‚ùå *–°—Ç–∞—Ç—É—Å:* –û—à–∏–±–∫–∞ API\n\n"
            text += f"–ü—Ä–æ–±–ª–µ–º–∞: {api_status['message']}\n\n"
            text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        keyboard = [
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="ai_functions")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ]
        
        if callback.message:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error("Error in callback_ai_functions: %s", e)
        if callback.message:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Ñ—É–Ω–∫—Ü–∏–π*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    
    await callback.answer()

@router.callback_query(F.data == "my_posts", admin_filter)
async def callback_view_posts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ my_posts"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ my_posts —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    from handlers.post_handlers import callback_my_posts
    await callback_my_posts(callback)

@router.callback_query(F.data == "get_channel_id", admin_filter)
async def callback_get_channel_id(callback: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞"""
    try:
        if callback.message:
            await callback.message.edit_text(
                "üîó *–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞*\n\n"
                "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:\n\n"
                "1Ô∏è‚É£ *–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
                "   ‚Ä¢ –ü—Ä–∞–≤–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "   ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "2Ô∏è‚É£ *–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É*\n"
                "   ‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é ID –∫–∞–Ω–∞–ª–∞\n"
                "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                "3Ô∏è‚É£ *–ì–æ—Ç–æ–≤–æ!* –ë–æ—Ç —Å–º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n\n"
                "üí° _–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å_",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
    except Exception as e:
        logger.warning("Failed to edit message in get_channel_id: %s", e)
    await callback.answer()

@router.message(F.forward_from_chat.type == "channel")
async def handle_channel_forward(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        
        logger.info(f"üì¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_id} ({channel_title})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ –ë–î
        from database import db
        existing_channel = await db.fetch_one("""
            SELECT id, tg_channel_id, title 
            FROM channels 
            WHERE tg_channel_id = $1
        """, channel_id)
        
        if existing_channel:
            await message.answer(
                f"‚úÖ *–ö–∞–Ω–∞–ª —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*\n\n"
                f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                f"üÜî *ID:* `{channel_id}`\n\n"
                f"–ë–æ—Ç —É–∂–µ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
            await db.execute("""
                INSERT INTO channels (tg_channel_id, title, created_at)
                VALUES ($1, $2, NOW())
            """, channel_id, channel_title)
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} ({channel_title}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
            
            await message.answer(
                f"üéâ *–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                f"üì¢ *–ö–∞–Ω–∞–ª:* {channel_title}\n"
                f"üÜî *ID:* `{channel_id}`\n\n"
                f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!\n\n"
                f"üí° _–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç?_",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
            
    except Exception as e:
        logger.error(f"Error handling channel forward: {e}")
        await message.answer(
            f"‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞*\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )

@router.callback_query(F.data == "check_scheduled_posts", admin_filter)
async def check_scheduled_posts(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        from services.post_scheduler import post_scheduler
        from services.post_service import post_service
        
        logger.info("üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        status = await post_scheduler.get_scheduler_status()
        
        if not status.get('bot_available'):
            await callback.message.edit_text(
                "‚ùå *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n"
                "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        scheduled_posts = await post_service.get_scheduled_posts()
        
        if not scheduled_posts:
            await callback.message.edit_text(
                "üì≠ *–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤*\n\n"
                "–í—Å–µ –ø–æ—Å—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
        else:
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç—ã
            published_count = await post_service.publish_scheduled_posts(callback.bot)
            
            result_text = f"üì¢ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤*\n\n"
            result_text += f"üìã *–ù–∞–π–¥–µ–Ω–æ:* {len(scheduled_posts)} –ø–æ—Å—Ç–æ–≤\n"
            result_text += f"‚úÖ *–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:* {published_count} –ø–æ—Å—Ç–æ–≤\n\n"
            
            if published_count < len(scheduled_posts):
                result_text += f"‚ùå *–û—à–∏–±–æ–∫:* {len(scheduled_posts) - published_count} –ø–æ—Å—Ç–æ–≤\n"
            
            await callback.message.edit_text(
                result_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_scheduled_posts")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
                ])
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in check_scheduled_posts: {e}")
        await callback.message.edit_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤*\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
            ])
        )
        await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "add_channel", admin_filter)
async def callback_add_channel(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –∫–∞–Ω–∞–ª–µ\n"
        "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel –≤ –∫–∞–Ω–∞–ª–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_settings")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "channel_stats", admin_filter)
async def callback_channel_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤
        stats = await export_service.get_export_stats()
        
        channels_text = ""
        if stats.get('channels'):
            for channel in stats['channels']:
                channel_name = channel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                posts_count = channel.get('posts_count', 0)
                channels_text += f"‚Ä¢ {channel_name}: {posts_count} –ø–æ—Å—Ç–æ–≤\n"
        else:
            channels_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö"
        
        await callback.message.edit_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤*\n\n"
            f"*–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤:* {stats.get('total_channels', 0)}\n"
            f"*–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:* {stats.get('total_posts', 0)}\n\n"
            f"*–ü–æ –∫–∞–Ω–∞–ª–∞–º:*\n{channels_text}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_settings")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error("Error in callback_channel_stats: %s", e)
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_settings")]
            ])
        )
        await callback.answer()

@router.callback_query(F.data == "create_tag", admin_filter)
async def callback_create_tag(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞"""
    await callback.message.edit_text(
        "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞*\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`/create_tag –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–µ–≥–∞`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/create_tag –Ω–æ–≤–æ—Å—Ç–∏`",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_tags")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "list_tags", admin_filter)
async def callback_list_tags(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
        tags = await tag_service.get_all_tags()
        
        if not tags:
            await callback.message.edit_text(
                "üè∑Ô∏è *–í—Å–µ —Ç–µ–≥–∏*\n\n"
                "–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_tags")]
                ])
            )
        else:
            tags_text = ""
            for i, tag in enumerate(tags[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
                tag_name = tag.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                posts_count = tag.get('posts_count', 0)
                tags_text += f"{i}. {tag_name} ({posts_count} –ø–æ—Å—Ç–æ–≤)\n"
            
            if len(tags) > 20:
                tags_text += f"\n... –∏ –µ—â–µ {len(tags) - 20} —Ç–µ–≥–æ–≤"
            
            await callback.message.edit_text(
                f"üè∑Ô∏è *–í—Å–µ —Ç–µ–≥–∏*\n\n{tags_text}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_tags")]
                ])
            )
        await callback.answer()
        
    except Exception as e:
        logger.error("Error in callback_list_tags: %s", e)
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_tags")]
            ])
        )
        await callback.answer()

@router.callback_query(F.data == "create_series", admin_filter)
async def callback_create_series(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏"""
    await callback.message.edit_text(
        "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏*\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`/create_series –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–µ—Ä–∏–∏`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/create_series –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π_–¥–∞–π–¥–∂–µ—Å—Ç`",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_series")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "list_series", admin_filter)
async def callback_list_series(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–∏
        series = await series_service.get_all_series()
        
        if not series:
            await callback.message.edit_text(
                "üìö *–í—Å–µ —Å–µ—Ä–∏–∏*\n\n"
                "–°–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_series")]
                ])
            )
        else:
            series_text = ""
            for i, series_item in enumerate(series[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
                series_name = series_item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                posts_count = series_item.get('posts_count', 0)
                series_text += f"{i}. {series_name} ({posts_count} –ø–æ—Å—Ç–æ–≤)\n"
            
            if len(series) > 20:
                series_text += f"\n... –∏ –µ—â–µ {len(series) - 20} —Å–µ—Ä–∏–π"
            
            await callback.message.edit_text(
                f"üìö *–í—Å–µ —Å–µ—Ä–∏–∏*\n\n{series_text}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_series")]
                ])
            )
        await callback.answer()
        
    except Exception as e:
        logger.error("Error in callback_list_series: %s", e)
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–π*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_series")]
            ])
        )
        await callback.answer()


