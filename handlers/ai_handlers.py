"""
@file: handlers/ai_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ AI —Ñ—É–Ω–∫—Ü–∏–π (YandexGPT)
@dependencies: services/ai_service.py, utils/keyboards.py, utils/filters.py
@created: 2025-09-13
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from services.ai_service import ai_service
from utils.keyboards import get_main_menu_keyboard
from utils.filters import IsConfigAdminFilter
from utils.logging import get_logger

logger = get_logger(__name__)
router = Router()

# –§–∏–ª—å—Ç—Ä—ã
admin_filter = IsConfigAdminFilter()

@router.message(Command("ai"), admin_filter)
async def cmd_ai(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é AI —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
        status = await ai_service.check_api_status()
        
        status_emoji = "üü¢" if status["status"] == "working" else "üî¥"
        status_text = f"{status_emoji} {status['message']}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè∑Ô∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤", callback_data="ai_suggest_tags")],
            [InlineKeyboardButton(text="‚úÇÔ∏è –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ai_shorten_text")],
            [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", callback_data="ai_change_style")],
            [InlineKeyboardButton(text="üìù –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ai_improve_text")],
            [InlineKeyboardButton(text="üìÑ –°–æ–∑–¥–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", callback_data="ai_annotation")],
            [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI", callback_data="ai_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")]
        ])
        
        await message.answer(
            f"ü§ñ *AI –ø–æ–º–æ—â–Ω–∏–∫ CtrlBot*\n\n"
            f"*–°—Ç–∞—Ç—É—Å:* {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error("Failed to show AI menu: %s", e)
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Ñ—É–Ω–∫—Ü–∏–π*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "ai_suggest_tags", admin_filter)
async def callback_ai_suggest_tags(callback: CallbackQuery):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤"""
    await callback.message.edit_text(
        "üè∑Ô∏è *–ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–≥–∏.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "ai_shorten_text", admin_filter)
async def callback_ai_shorten_text(callback: CallbackQuery):
    """–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    await callback.message.edit_text(
        "‚úÇÔ∏è *–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "ai_change_style", admin_filter)
async def callback_ai_change_style(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∞ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π", callback_data="style_formal")],
        [InlineKeyboardButton(text="üòä –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", callback_data="style_casual")],
        [InlineKeyboardButton(text="üì∫ –ù–æ–≤–æ—Å—Ç–Ω–æ–π", callback_data="style_news")],
        [InlineKeyboardButton(text="üíº –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π", callback_data="style_marketing")],
        [InlineKeyboardButton(text="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", callback_data="style_technical")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai")]
    ])
    
    await callback.message.edit_text(
        "üé® *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "ai_improve_text", admin_filter)
async def callback_ai_improve_text(callback: CallbackQuery):
    """–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    await callback.message.edit_text(
        "üìù *–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è).\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "ai_annotation", admin_filter)
async def callback_ai_annotation(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "üìÑ *–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –∏ —è —Å–æ–∑–¥–∞–º –∫—Ä–∞—Ç–∫—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "ai_settings", admin_filter)
async def callback_ai_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI"""
    try:
        status = await ai_service.check_api_status()
        
        await callback.message.edit_text(
            f"üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI*\n\n"
            f"*–°—Ç–∞—Ç—É—Å API:* {status['message']}\n\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            f"‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤\n"
            f"‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è\n"
            f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π\n\n"
            f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞:*\n"
            f"‚Ä¢ YANDEX_API_KEY: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ai_service.api_key else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ YANDEX_FOLDER_ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ai_service.folder_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai")]
            ])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to show AI settings: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data.startswith("style_"), admin_filter)
async def callback_style_selected(callback: CallbackQuery):
    """–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    style = callback.data.split("_")[1]
    style_names = {
        "formal": "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π",
        "casual": "–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", 
        "news": "–Ω–æ–≤–æ—Å—Ç–Ω–æ–π",
        "marketing": "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π",
        "technical": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π"
    }
    
    await callback.message.edit_text(
        f"üé® *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –Ω–∞ {style_names.get(style, style)}*\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤ {style_names.get(style, style)} —Å—Ç–∏–ª–µ.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai_change_style")]
        ])
    )
    await callback.answer()

@router.message(admin_filter)
async def handle_ai_text_processing(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        text = message.text.strip()
        if not text or len(text) < 10:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ä–µ–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–≥–æ–≤
        if any(word in text.lower() for word in ["—Ç–µ–≥–∏", "—Ç–µ–≥", "–º–µ—Ç–∫–∏", "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]):
            await process_tag_suggestion(message, text)
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å
        elif len(text) > 500:
            await process_text_shortening(message, text)
        # –ò–Ω–∞—á–µ - —É–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç
        else:
            await process_text_improvement(message, text)
            
    except Exception as e:
        logger.error("Failed to process AI text: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def process_tag_suggestion(message: Message, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤"""
    try:
        await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–≥–∏...")
        
        tags = await ai_service.suggest_tags(text)
        
        if tags:
            tags_text = ", ".join([f"#{tag}" for tag in tags])
            await message.answer(
                f"üè∑Ô∏è *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ç–µ–≥–∏:*\n\n{tags_text}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ç–µ–≥–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞!"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–≥–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI.")
            
    except Exception as e:
        logger.error("Failed to process tag suggestion: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤.")

async def process_text_shortening(message: Message, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    try:
        await message.answer("‚úÇÔ∏è –°–æ–∫—Ä–∞—â–∞—é —Ç–µ–∫—Å—Ç...")
        
        shortened = await ai_service.shorten_text(text, max_length=200)
        
        await message.answer(
            f"‚úÇÔ∏è *–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n\n{shortened}\n\n"
            f"*–ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏–Ω–∞:* {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"*–ù–æ–≤–∞—è –¥–ª–∏–Ω–∞:* {len(shortened)} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        
    except Exception as e:
        logger.error("Failed to process text shortening: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.")

async def process_text_improvement(message: Message, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    try:
        await message.answer("üìù –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç...")
        
        improved = await ai_service.improve_text(text)
        
        await message.answer(
            f"üìù *–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n\n{improved}\n\n"
            f"*–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n{text}"
        )
        
    except Exception as e:
        logger.error("Failed to process text improvement: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.")

@router.callback_query(F.data == "back_to_admin", admin_filter)
async def callback_back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.edit_text(
        "üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å CtrlBot*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()
