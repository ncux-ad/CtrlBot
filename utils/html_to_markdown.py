# Utils: HTML to Markdown converter

import re
from typing import Optional

def detect_and_convert_formatting(text: str) -> str:
    """
    –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç HTML –∏–ª–∏ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Markdown
    """
    if not text:
        return text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ HTML —Ç–µ–≥–∏
    if '<' in text and '>' in text:
        return html_to_markdown(text)
    
    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ Markdown, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if any(marker in text for marker in ['*', '_', '`', '[', ']']):
        return text
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    return apply_basic_formatting(text)

def html_to_markdown(html_text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Markdown
    """
    text = html_text
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML —Ç–µ–≥–∏ –≤ Markdown
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'<b>(.*?)</b>', r'*\1*', text, flags=re.DOTALL)
    text = re.sub(r'<strong>(.*?)</strong>', r'*\1*', text, flags=re.DOTALL)
    
    # –ö—É—Ä—Å–∏–≤
    text = re.sub(r'<i>(.*?)</i>', r'_\1_', text, flags=re.DOTALL)
    text = re.sub(r'<em>(.*?)</em>', r'_\1_', text, flags=re.DOTALL)
    
    # –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥
    text = re.sub(r'<code>(.*?)</code>', r'`\1`', text, flags=re.DOTALL)
    
    # –ë–ª–æ–∫ –∫–æ–¥–∞
    text = re.sub(r'<pre>(.*?)</pre>', r'```\n\1\n```', text, flags=re.DOTALL)
    
    # –°—Å—ã–ª–∫–∏
    text = re.sub(r'<a href="([^"]*)"[^>]*>(.*?)</a>', r'[\2](\1)', text, flags=re.DOTALL)
    
    # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    text = re.sub(r'<u>(.*?)</u>', r'_\1_', text, flags=re.DOTALL)
    
    # –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    text = re.sub(r'<s>(.*?)</s>', r'~~\1~~', text, flags=re.DOTALL)
    text = re.sub(r'<strike>(.*?)</strike>', r'~~\1~~', text, flags=re.DOTALL)
    text = re.sub(r'<del>(.*?)</del>', r'~~\1~~', text, flags=re.DOTALL)
    
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', text)
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
    text = html_entities_decode(text)
    
    # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    
    return text

def html_entities_decode(text: str) -> str:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç HTML entities
    """
    entities = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'",
        '&apos;': "'",
        '&nbsp;': ' ',
        '&copy;': '¬©',
        '&reg;': '¬Æ',
        '&trade;': '‚Ñ¢',
        '&hellip;': '‚Ä¶',
        '&mdash;': '‚Äî',
        '&ndash;': '‚Äì',
        '&lsquo;': ''',
        '&rsquo;': ''',
        '&ldquo;': '"',
        '&rdquo;': '"',
    }
    
    for entity, char in entities.items():
        text = text.replace(entity, char)
    
    return text

def is_html_formatting(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    if not text:
        return False
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ HTML —Ç–µ–≥–æ–≤
    html_pattern = r'<[^>]+>'
    return bool(re.search(html_pattern, text))

def format_detection_info(text: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    """
    if is_html_formatting(text):
        return "üîç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ Markdown"
    elif any(marker in text for marker in ['*', '_', '`', '[', ']']):
        return "üìù <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å"
    elif has_rich_formatting(text):
        return "‚ú® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else:
        return "üìÑ <b>–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç</b> - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

def has_rich_formatting(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–≤—ã—á–∫–∏, —Ç–∏—Ä–µ, —ç–º–æ–¥–∑–∏ –∏ —Ç.–¥.)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatting_indicators = [
        '"',  # –ö–∞–≤—ã—á–∫–∏
        '¬´', '¬ª',  # –†—É—Å—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏
        '‚Äî', '‚Äì',  # –î–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ
        '‚Ä¢', '‚ó¶', '‚ñ™', '‚ñ´',  # –ú–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
        '1.', '2.', '3.',  # –ù—É–º–µ—Ä–∞—Ü–∏—è
        'P.S.', 'P.S',  # –ü–æ—Å—Ç—Å–∫—Ä–∏–ø—Ç—É–º
        '–í–æ–ø—Ä–æ—Å:', '–û—Ç–≤–µ—Ç:',  # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        ':',  # –î–≤–æ–µ—Ç–æ—á–∏–µ (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è)
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏
    emoji_pattern = r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]'
    has_emoji = bool(re.search(emoji_pattern, text))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    has_formatting = any(indicator in text for indicator in formatting_indicators)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏)
    lines = text.split('\n')
    has_structure = any(
        line.strip().endswith(':') or  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        line.strip().startswith(('‚Ä¢', '‚ó¶', '‚ñ™', '‚ñ´', '-', '*')) or  # –°–ø–∏—Å–∫–∏
        line.strip().startswith(tuple(f'{i}.' for i in range(1, 10)))  # –ù—É–º–µ—Ä–∞—Ü–∏—è
        for line in lines
    )
    
    return has_emoji or has_formatting or has_structure

def apply_basic_formatting(text: str) -> str:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞–∑–æ–≤–æ–µ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    """
    if not text:
        return text
    
    lines = text.split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            formatted_lines.append('')
            continue
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∏, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏–µ)
        if line.endswith(':') and not line.startswith(('http', 'www')):
            formatted_lines.append(f"*{line}*")
            continue
        
        # –°–ø–∏—Å–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
        if line.startswith(('‚Ä¢', '‚ó¶', '‚ñ™', '‚ñ´', '-', '*')):
            # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º Markdown –º–∞—Ä–∫–µ—Ä
            content = line[1:].strip()
            if content:
                formatted_lines.append(f"‚Ä¢ {content}")
            else:
                formatted_lines.append(line)
            continue
        
        # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        if re.match(r'^\d+\.', line):
            formatted_lines.append(line)
            continue
        
        # –¶–∏—Ç–∞—Ç—ã (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –∫–∞–≤—ã—á–µ–∫)
        if line.startswith(('"', '¬´', '"')):
            formatted_lines.append(f"> {line}")
            continue
        
        # P.S. –∏ –ø–æ–¥–æ–±–Ω—ã–µ
        if line.startswith(('P.S.', 'P.S', 'P.S:')):
            formatted_lines.append(f"*{line}*")
            continue
        
        # –û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        formatted_lines.append(line)
    
    return '\n'.join(formatted_lines)

def restore_formatting_from_entities(text: str, entities) -> str:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Telegram entities
    """
    if not entities:
        return text
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º entities –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç –Ω–∞—á–∞–ª–∞ –∫ –∫–æ–Ω—Ü—É)
    sorted_entities = sorted(entities, key=lambda e: e.offset)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    chars = list(text)
    offset = 0  # –°–º–µ—â–µ–Ω–∏–µ –∏–∑-–∑–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    for entity in sorted_entities:
        start = entity.offset + offset
        end = start + entity.length
        
        if start >= len(chars) or end > len(chars):
            continue
            
        original_text = ''.join(chars[start:end])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ entity
        if entity.type == "bold":
            formatted_text = f"*{original_text}*"
        elif entity.type == "italic":
            formatted_text = f"_{original_text}_"
        elif entity.type == "code":
            formatted_text = f"`{original_text}`"
        elif entity.type == "pre":
            formatted_text = f"```\n{original_text}\n```"
        elif entity.type == "text_link" and entity.url:
            formatted_text = f"[{original_text}]({entity.url})"
        elif entity.type == "underline":
            formatted_text = f"_{original_text}_"  # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∫–∞–∫ –∫—É—Ä—Å–∏–≤
        elif entity.type == "strikethrough":
            formatted_text = f"~~{original_text}~~"
        elif entity.type == "blockquote":
            # –î–ª—è blockquote –¥–æ–±–∞–≤–ª—è–µ–º > –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            lines = original_text.split('\n')
            formatted_lines = [f"> {line}" if line.strip() else ">" for line in lines]
            formatted_text = '\n'.join(formatted_lines)
        else:
            formatted_text = original_text
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–∏–º–≤–æ–ª–æ–≤
        new_chars = list(formatted_text)
        chars[start:end] = new_chars
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        offset += len(new_chars) - (end - start)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –ø–æ –∫–∞–≤—ã—á–∫–∞–º
    result = ''.join(chars)
    result = enhance_quotes_formatting(result)
    
    return result

def enhance_quotes_formatting(text: str) -> str:
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç –ø–æ –∫–∞–≤—ã—á–∫–∞–º
    """
    lines = text.split('\n')
    enhanced_lines = []
    
    for line in lines:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–∞–≤—ã—á–∫–∏ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–∂–µ blockquote
        if (line.strip().startswith(('"', '¬´', '"')) and 
            not line.strip().startswith('>')):
            enhanced_lines.append(f"> {line}")
        else:
            enhanced_lines.append(line)
    
    return '\n'.join(enhanced_lines)
