"""
@file: utils/post_filters.py
@description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
@dependencies: aiogram, datetime
@created: 2025-09-13
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

class PostFilters:
    def __init__(self):
        self.date_filters = {
            'today': '–°–µ–≥–æ–¥–Ω—è',
            'week': '–ù–µ–¥–µ–ª—è', 
            'month': '–ú–µ—Å—è—Ü',
            'all': '–í—Å–µ –≤—Ä–µ–º—è'
        }
        
        self.status_filters = {
            'all': '–í—Å–µ',
            'published': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ',
            'scheduled': '–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ',
            'failed': '–ù–µ—É–¥–∞—á–Ω—ã–µ',
            'deleted': '–£–¥–∞–ª–µ–Ω–Ω—ã–µ'
        }
        
        self.sort_options = {
            'date_desc': '–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)',
            'date_asc': '–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)',
            'status': '–ü–æ —Å—Ç–∞—Ç—É—Å—É',
            'channel': '–ü–æ –∫–∞–Ω–∞–ª—É',
            'views': '–ü–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º'
        }
    
    def create_filters_keyboard(self, current_filters: dict = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        if not current_filters:
            current_filters = {
                'date': 'all',
                'status': 'all', 
                'sort': 'date_desc'
            }
        
        buttons = []
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ
        date_row = []
        for key, label in self.date_filters.items():
            emoji = "‚úÖ" if current_filters.get('date') == key else "‚ö™"
            date_row.append(InlineKeyboardButton(
                f"{emoji} {label}", 
                callback_data=f"filter_date_{key}"
            ))
        buttons.append(date_row)
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_row = []
        for key, label in self.status_filters.items():
            emoji = "‚úÖ" if current_filters.get('status') == key else "‚ö™"
            status_row.append(InlineKeyboardButton(
                f"{emoji} {label}", 
                callback_data=f"filter_status_{key}"
            ))
        buttons.append(status_row)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_row = []
        for key, label in self.sort_options.items():
            emoji = "‚úÖ" if current_filters.get('sort') == key else "‚ö™"
            sort_row.append(InlineKeyboardButton(
                f"{emoji} {label}", 
                callback_data=f"filter_sort_{key}"
            ))
        buttons.append(sort_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_row = [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_posts"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats"),
            InlineKeyboardButton("‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all_posts")
        ]
        buttons.append(control_row)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def apply_filters(self, posts: list, filters: dict) -> list:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤"""
        filtered_posts = posts.copy()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if filters.get('date') != 'all':
            now = datetime.now()
            if filters['date'] == 'today':
                start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
                filtered_posts = [p for p in filtered_posts if p['created_at'] >= start_date]
            elif filters['date'] == 'week':
                start_date = now - timedelta(days=7)
                filtered_posts = [p for p in filtered_posts if p['created_at'] >= start_date]
            elif filters['date'] == 'month':
                start_date = now - timedelta(days=30)
                filtered_posts = [p for p in filtered_posts if p['created_at'] >= start_date]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if filters.get('status') != 'all':
            filtered_posts = [p for p in filtered_posts if p['status'] == filters['status']]
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if filters.get('sort') == 'date_desc':
            filtered_posts.sort(key=lambda x: x['created_at'], reverse=True)
        elif filters.get('sort') == 'date_asc':
            filtered_posts.sort(key=lambda x: x['created_at'])
        elif filters.get('sort') == 'status':
            filtered_posts.sort(key=lambda x: x['status'])
        elif filters.get('sort') == 'views':
            filtered_posts.sort(key=lambda x: x.get('views', 0), reverse=True)
        
        return filtered_posts
