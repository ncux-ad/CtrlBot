"""
@file: utils/pagination.py
@description: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
@created: 2025-09-13
"""

from typing import List, Dict, Any, Optional, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.logging import get_logger

logger = get_logger(__name__)

class PaginationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤"""
    
    def __init__(self, items_per_page: int = 10, max_pages: int = 100):
        self.items_per_page = items_per_page
        self.max_pages = max_pages
    
    def get_page_info(self, total_items: int, current_page: int = 1) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        total_pages = max(1, (total_items + self.items_per_page - 1) // self.items_per_page)
        current_page = max(1, min(current_page, total_pages))
        
        start_index = (current_page - 1) * self.items_per_page
        end_index = min(start_index + self.items_per_page, total_items)
        
        return {
            'current_page': current_page,
            'total_pages': total_pages,
            'total_items': total_items,
            'start_index': start_index,
            'end_index': end_index,
            'has_previous': current_page > 1,
            'has_next': current_page < total_pages,
            'items_on_page': end_index - start_index
        }
    
    def get_page_items(self, items: List[Any], current_page: int = 1) -> Tuple[List[Any], Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        page_info = self.get_page_info(len(items), current_page)
        page_items = items[page_info['start_index']:page_info['end_index']]
        return page_items, page_info
    
    def create_pagination_keyboard(
        self, 
        page_info: Dict[str, Any], 
        callback_prefix: str,
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        if page_info['has_previous']:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", 
                callback_data=f"{callback_prefix}_page_{page_info['current_page'] - 1}"
            ))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(
            text=f"{page_info['current_page']}/{page_info['total_pages']}", 
            callback_data="pagination_info"
        ))
        
        if page_info['has_next']:
            nav_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è", 
                callback_data=f"{callback_prefix}_page_{page_info['current_page'] + 1}"
            ))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            keyboard.extend(additional_buttons)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def create_posts_pagination_keyboard(
        self,
        page_info: Dict[str, Any],
        posts: List[Dict[str, Any]],
        callback_prefix: str = "posts"
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for i, post in enumerate(posts, page_info['start_index'] + 1):
            post_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            post_buttons.append(InlineKeyboardButton(
                text=f"üëÅÔ∏è {i}", 
                callback_data=f"view_post_{post['id']}"
            ))
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)
            if post['status'] != 'deleted':
                post_buttons.append(InlineKeyboardButton(
                    text=f"üóëÔ∏è {i}", 
                    callback_data=f"delete_post_{post['id']}"
                ))
            
            keyboard.append(post_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        if page_info['has_previous']:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", 
                callback_data=f"{callback_prefix}_page_{page_info['current_page'] - 1}"
            ))
        
        nav_buttons.append(InlineKeyboardButton(
            text=f"{page_info['current_page']}/{page_info['total_pages']}", 
            callback_data="pagination_info"
        ))
        
        if page_info['has_next']:
            nav_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è", 
                callback_data=f"{callback_prefix}_page_{page_info['current_page'] + 1}"
            ))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([
            InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
pagination_manager = PaginationManager(items_per_page=10, max_pages=100)

def get_pagination_manager() -> PaginationManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    return pagination_manager
