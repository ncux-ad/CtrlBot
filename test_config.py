#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CtrlBot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import sys
import os

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CtrlBot...")
    
    try:
        from config import config
        print("‚úÖ –ú–æ–¥—É–ª—å config –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        required_settings = [
            ('BOT_TOKEN', config.BOT_TOKEN),
            ('DB_PASSWORD', config.DB_PASSWORD),
        ]
        
        missing = []
        for name, value in required_settings:
            if not value:
                missing.append(name)
            else:
                print(f"‚úÖ {name}: {'*' * 8} (—Å–∫—Ä—ã—Ç–æ)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ADMIN_IDS –æ—Ç–¥–µ–ª—å–Ω–æ
        if not config.ADMIN_IDS:
            print("‚ùå ADMIN_IDS: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
            missing.append('ADMIN_IDS')
        else:
            print(f"‚úÖ ADMIN_IDS: {len(config.ADMIN_IDS)} –∞–¥–º–∏–Ω–æ–≤")
        
        if missing:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        optional_settings = [
            ('YANDEX_API_KEY', config.YANDEX_API_KEY),
            ('YANDEX_FOLDER_ID', config.YANDEX_FOLDER_ID),
        ]
        
        for name, value in optional_settings:
            if value:
                print(f"‚úÖ {name}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            else:
                print(f"‚ö†Ô∏è  {name}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_dependencies():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = [
        ('aiogram', 'aiogram'),
        ('asyncpg', 'asyncpg'),
        ('pandas', 'pandas'),
        ('openpyxl', 'openpyxl'),
        ('python-dotenv', 'dotenv'),
    ]
    
    missing = []
    for name, module in dependencies:
        try:
            __import__(module)
            print(f"‚úÖ {name}")
        except ImportError:
            print(f"‚ùå {name} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing.append(name)
    
    if missing:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ CtrlBot - –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False
    
    print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_ok = test_config()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps_ok = test_dependencies()
    
    print("\n" + "="*50)
    if config_ok and deps_ok:
        print("üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É! –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python bot.py")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    
    return config_ok and deps_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
